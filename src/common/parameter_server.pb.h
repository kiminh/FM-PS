// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parameter_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_parameter_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_parameter_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_parameter_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_parameter_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parameter_5fserver_2eproto;
namespace task {
class KeyValuePair;
class KeyValuePairDefaultTypeInternal;
extern KeyValuePairDefaultTypeInternal _KeyValuePair_default_instance_;
class ParametersOrGradients;
class ParametersOrGradientsDefaultTypeInternal;
extern ParametersOrGradientsDefaultTypeInternal _ParametersOrGradients_default_instance_;
}  // namespace task
PROTOBUF_NAMESPACE_OPEN
template<> ::task::KeyValuePair* Arena::CreateMaybeMessage<::task::KeyValuePair>(Arena*);
template<> ::task::ParametersOrGradients* Arena::CreateMaybeMessage<::task::ParametersOrGradients>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace task {

// ===================================================================

class ParametersOrGradients :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:task.ParametersOrGradients) */ {
 public:
  ParametersOrGradients();
  virtual ~ParametersOrGradients();

  ParametersOrGradients(const ParametersOrGradients& from);
  ParametersOrGradients(ParametersOrGradients&& from) noexcept
    : ParametersOrGradients() {
    *this = ::std::move(from);
  }

  inline ParametersOrGradients& operator=(const ParametersOrGradients& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParametersOrGradients& operator=(ParametersOrGradients&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParametersOrGradients& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParametersOrGradients* internal_default_instance() {
    return reinterpret_cast<const ParametersOrGradients*>(
               &_ParametersOrGradients_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ParametersOrGradients& a, ParametersOrGradients& b) {
    a.Swap(&b);
  }
  inline void Swap(ParametersOrGradients* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParametersOrGradients* New() const final {
    return CreateMaybeMessage<ParametersOrGradients>(nullptr);
  }

  ParametersOrGradients* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParametersOrGradients>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParametersOrGradients& from);
  void MergeFrom(const ParametersOrGradients& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParametersOrGradients* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "task.ParametersOrGradients";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parameter_5fserver_2eproto);
    return ::descriptor_table_parameter_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairsFieldNumber = 1,
  };
  // repeated .task.KeyValuePair pairs = 1;
  int pairs_size() const;
  private:
  int _internal_pairs_size() const;
  public:
  void clear_pairs();
  ::task::KeyValuePair* mutable_pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::KeyValuePair >*
      mutable_pairs();
  private:
  const ::task::KeyValuePair& _internal_pairs(int index) const;
  ::task::KeyValuePair* _internal_add_pairs();
  public:
  const ::task::KeyValuePair& pairs(int index) const;
  ::task::KeyValuePair* add_pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::KeyValuePair >&
      pairs() const;

  // @@protoc_insertion_point(class_scope:task.ParametersOrGradients)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::KeyValuePair > pairs_;
  friend struct ::TableStruct_parameter_5fserver_2eproto;
};
// -------------------------------------------------------------------

class KeyValuePair :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:task.KeyValuePair) */ {
 public:
  KeyValuePair();
  virtual ~KeyValuePair();

  KeyValuePair(const KeyValuePair& from);
  KeyValuePair(KeyValuePair&& from) noexcept
    : KeyValuePair() {
    *this = ::std::move(from);
  }

  inline KeyValuePair& operator=(const KeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValuePair& operator=(KeyValuePair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValuePair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValuePair* internal_default_instance() {
    return reinterpret_cast<const KeyValuePair*>(
               &_KeyValuePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeyValuePair& a, KeyValuePair& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValuePair* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValuePair* New() const final {
    return CreateMaybeMessage<KeyValuePair>(nullptr);
  }

  KeyValuePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValuePair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValuePair& from);
  void MergeFrom(const KeyValuePair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValuePair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "task.KeyValuePair";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parameter_5fserver_2eproto);
    return ::descriptor_table_parameter_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 3,
    kValuesFieldNumber = 4,
    kNameFieldNumber = 1,
    kDimFieldNumber = 2,
  };
  // repeated uint32 shape = 3;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_shape();

  // repeated float values = 4;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 dim = 2;
  bool has_dim() const;
  private:
  bool _internal_has_dim() const;
  public:
  void clear_dim();
  ::PROTOBUF_NAMESPACE_ID::uint32 dim() const;
  void set_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dim() const;
  void _internal_set_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:task.KeyValuePair)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > shape_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dim_;
  friend struct ::TableStruct_parameter_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParametersOrGradients

// repeated .task.KeyValuePair pairs = 1;
inline int ParametersOrGradients::_internal_pairs_size() const {
  return pairs_.size();
}
inline int ParametersOrGradients::pairs_size() const {
  return _internal_pairs_size();
}
inline void ParametersOrGradients::clear_pairs() {
  pairs_.Clear();
}
inline ::task::KeyValuePair* ParametersOrGradients::mutable_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:task.ParametersOrGradients.pairs)
  return pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::KeyValuePair >*
ParametersOrGradients::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_list:task.ParametersOrGradients.pairs)
  return &pairs_;
}
inline const ::task::KeyValuePair& ParametersOrGradients::_internal_pairs(int index) const {
  return pairs_.Get(index);
}
inline const ::task::KeyValuePair& ParametersOrGradients::pairs(int index) const {
  // @@protoc_insertion_point(field_get:task.ParametersOrGradients.pairs)
  return _internal_pairs(index);
}
inline ::task::KeyValuePair* ParametersOrGradients::_internal_add_pairs() {
  return pairs_.Add();
}
inline ::task::KeyValuePair* ParametersOrGradients::add_pairs() {
  // @@protoc_insertion_point(field_add:task.ParametersOrGradients.pairs)
  return _internal_add_pairs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::KeyValuePair >&
ParametersOrGradients::pairs() const {
  // @@protoc_insertion_point(field_list:task.ParametersOrGradients.pairs)
  return pairs_;
}

// -------------------------------------------------------------------

// KeyValuePair

// optional string name = 1;
inline bool KeyValuePair::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KeyValuePair::has_name() const {
  return _internal_has_name();
}
inline void KeyValuePair::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KeyValuePair::name() const {
  // @@protoc_insertion_point(field_get:task.KeyValuePair.name)
  return _internal_name();
}
inline void KeyValuePair::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:task.KeyValuePair.name)
}
inline std::string* KeyValuePair::mutable_name() {
  // @@protoc_insertion_point(field_mutable:task.KeyValuePair.name)
  return _internal_mutable_name();
}
inline const std::string& KeyValuePair::_internal_name() const {
  return name_.GetNoArena();
}
inline void KeyValuePair::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeyValuePair::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.KeyValuePair.name)
}
inline void KeyValuePair::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.KeyValuePair.name)
}
inline void KeyValuePair::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.KeyValuePair.name)
}
inline std::string* KeyValuePair::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyValuePair::release_name() {
  // @@protoc_insertion_point(field_release:task.KeyValuePair.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValuePair::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:task.KeyValuePair.name)
}

// optional uint32 dim = 2;
inline bool KeyValuePair::_internal_has_dim() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KeyValuePair::has_dim() const {
  return _internal_has_dim();
}
inline void KeyValuePair::clear_dim() {
  dim_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyValuePair::_internal_dim() const {
  return dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyValuePair::dim() const {
  // @@protoc_insertion_point(field_get:task.KeyValuePair.dim)
  return _internal_dim();
}
inline void KeyValuePair::_internal_set_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  dim_ = value;
}
inline void KeyValuePair::set_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dim(value);
  // @@protoc_insertion_point(field_set:task.KeyValuePair.dim)
}

// repeated uint32 shape = 3;
inline int KeyValuePair::_internal_shape_size() const {
  return shape_.size();
}
inline int KeyValuePair::shape_size() const {
  return _internal_shape_size();
}
inline void KeyValuePair::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyValuePair::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyValuePair::shape(int index) const {
  // @@protoc_insertion_point(field_get:task.KeyValuePair.shape)
  return _internal_shape(index);
}
inline void KeyValuePair::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:task.KeyValuePair.shape)
}
inline void KeyValuePair::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shape_.Add(value);
}
inline void KeyValuePair::add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:task.KeyValuePair.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
KeyValuePair::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
KeyValuePair::shape() const {
  // @@protoc_insertion_point(field_list:task.KeyValuePair.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
KeyValuePair::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
KeyValuePair::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:task.KeyValuePair.shape)
  return _internal_mutable_shape();
}

// repeated float values = 4;
inline int KeyValuePair::_internal_values_size() const {
  return values_.size();
}
inline int KeyValuePair::values_size() const {
  return _internal_values_size();
}
inline void KeyValuePair::clear_values() {
  values_.Clear();
}
inline float KeyValuePair::_internal_values(int index) const {
  return values_.Get(index);
}
inline float KeyValuePair::values(int index) const {
  // @@protoc_insertion_point(field_get:task.KeyValuePair.values)
  return _internal_values(index);
}
inline void KeyValuePair::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:task.KeyValuePair.values)
}
inline void KeyValuePair::_internal_add_values(float value) {
  values_.Add(value);
}
inline void KeyValuePair::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:task.KeyValuePair.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KeyValuePair::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KeyValuePair::values() const {
  // @@protoc_insertion_point(field_list:task.KeyValuePair.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KeyValuePair::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KeyValuePair::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:task.KeyValuePair.values)
  return _internal_mutable_values();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace task

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_parameter_5fserver_2eproto
