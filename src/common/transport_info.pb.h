// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5finfo_2eproto;
namespace task {
class DistInfo;
class DistInfoDefaultTypeInternal;
extern DistInfoDefaultTypeInternal _DistInfo_default_instance_;
class HyperParameter;
class HyperParameterDefaultTypeInternal;
extern HyperParameterDefaultTypeInternal _HyperParameter_default_instance_;
class Layer;
class LayerDefaultTypeInternal;
extern LayerDefaultTypeInternal _Layer_default_instance_;
class NetworkStruct;
class NetworkStructDefaultTypeInternal;
extern NetworkStructDefaultTypeInternal _NetworkStruct_default_instance_;
class Parameter;
class ParameterDefaultTypeInternal;
extern ParameterDefaultTypeInternal _Parameter_default_instance_;
class ParameterInfo;
class ParameterInfoDefaultTypeInternal;
extern ParameterInfoDefaultTypeInternal _ParameterInfo_default_instance_;
class ServerInfo;
class ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class ServerTask;
class ServerTaskDefaultTypeInternal;
extern ServerTaskDefaultTypeInternal _ServerTask_default_instance_;
class WorkerTask;
class WorkerTaskDefaultTypeInternal;
extern WorkerTaskDefaultTypeInternal _WorkerTask_default_instance_;
}  // namespace task
PROTOBUF_NAMESPACE_OPEN
template<> ::task::DistInfo* Arena::CreateMaybeMessage<::task::DistInfo>(Arena*);
template<> ::task::HyperParameter* Arena::CreateMaybeMessage<::task::HyperParameter>(Arena*);
template<> ::task::Layer* Arena::CreateMaybeMessage<::task::Layer>(Arena*);
template<> ::task::NetworkStruct* Arena::CreateMaybeMessage<::task::NetworkStruct>(Arena*);
template<> ::task::Parameter* Arena::CreateMaybeMessage<::task::Parameter>(Arena*);
template<> ::task::ParameterInfo* Arena::CreateMaybeMessage<::task::ParameterInfo>(Arena*);
template<> ::task::ServerInfo* Arena::CreateMaybeMessage<::task::ServerInfo>(Arena*);
template<> ::task::ServerTask* Arena::CreateMaybeMessage<::task::ServerTask>(Arena*);
template<> ::task::WorkerTask* Arena::CreateMaybeMessage<::task::WorkerTask>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace task {

enum Parameter_Data_type : int {
  Parameter_Data_type_int8 = 0,
  Parameter_Data_type_float16 = 1,
  Parameter_Data_type_float32 = 2,
  Parameter_Data_type_float64 = 3
};
bool Parameter_Data_type_IsValid(int value);
constexpr Parameter_Data_type Parameter_Data_type_Data_type_MIN = Parameter_Data_type_int8;
constexpr Parameter_Data_type Parameter_Data_type_Data_type_MAX = Parameter_Data_type_float64;
constexpr int Parameter_Data_type_Data_type_ARRAYSIZE = Parameter_Data_type_Data_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Parameter_Data_type_descriptor();
template<typename T>
inline const std::string& Parameter_Data_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Parameter_Data_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Parameter_Data_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Parameter_Data_type_descriptor(), enum_t_value);
}
inline bool Parameter_Data_type_Parse(
    const std::string& name, Parameter_Data_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Parameter_Data_type>(
    Parameter_Data_type_descriptor(), name, value);
}
// ===================================================================

class DistInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:task.DistInfo) */ {
 public:
  DistInfo();
  virtual ~DistInfo();

  DistInfo(const DistInfo& from);
  DistInfo(DistInfo&& from) noexcept
    : DistInfo() {
    *this = ::std::move(from);
  }

  inline DistInfo& operator=(const DistInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistInfo& operator=(DistInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DistInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistInfo* internal_default_instance() {
    return reinterpret_cast<const DistInfo*>(
               &_DistInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DistInfo& a, DistInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DistInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DistInfo* New() const final {
    return CreateMaybeMessage<DistInfo>(nullptr);
  }

  DistInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DistInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DistInfo& from);
  void MergeFrom(const DistInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "task.DistInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5finfo_2eproto);
    return ::descriptor_table_transport_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPathFieldNumber = 3,
    kDataDivisionFieldNumber = 4,
    kModelDivisionFieldNumber = 5,
    kDatasetFieldNumber = 6,
    kParameterInfoFieldNumber = 10,
    kNumWorkersFieldNumber = 1,
    kNumServersFieldNumber = 2,
  };
  // optional string data_path = 3;
  bool has_data_path() const;
  private:
  bool _internal_has_data_path() const;
  public:
  void clear_data_path();
  const std::string& data_path() const;
  void set_data_path(const std::string& value);
  void set_data_path(std::string&& value);
  void set_data_path(const char* value);
  void set_data_path(const char* value, size_t size);
  std::string* mutable_data_path();
  std::string* release_data_path();
  void set_allocated_data_path(std::string* data_path);
  private:
  const std::string& _internal_data_path() const;
  void _internal_set_data_path(const std::string& value);
  std::string* _internal_mutable_data_path();
  public:

  // optional string data_division = 4;
  bool has_data_division() const;
  private:
  bool _internal_has_data_division() const;
  public:
  void clear_data_division();
  const std::string& data_division() const;
  void set_data_division(const std::string& value);
  void set_data_division(std::string&& value);
  void set_data_division(const char* value);
  void set_data_division(const char* value, size_t size);
  std::string* mutable_data_division();
  std::string* release_data_division();
  void set_allocated_data_division(std::string* data_division);
  private:
  const std::string& _internal_data_division() const;
  void _internal_set_data_division(const std::string& value);
  std::string* _internal_mutable_data_division();
  public:

  // optional string model_division = 5;
  bool has_model_division() const;
  private:
  bool _internal_has_model_division() const;
  public:
  void clear_model_division();
  const std::string& model_division() const;
  void set_model_division(const std::string& value);
  void set_model_division(std::string&& value);
  void set_model_division(const char* value);
  void set_model_division(const char* value, size_t size);
  std::string* mutable_model_division();
  std::string* release_model_division();
  void set_allocated_model_division(std::string* model_division);
  private:
  const std::string& _internal_model_division() const;
  void _internal_set_model_division(const std::string& value);
  std::string* _internal_mutable_model_division();
  public:

  // optional string dataset = 6;
  bool has_dataset() const;
  private:
  bool _internal_has_dataset() const;
  public:
  void clear_dataset();
  const std::string& dataset() const;
  void set_dataset(const std::string& value);
  void set_dataset(std::string&& value);
  void set_dataset(const char* value);
  void set_dataset(const char* value, size_t size);
  std::string* mutable_dataset();
  std::string* release_dataset();
  void set_allocated_dataset(std::string* dataset);
  private:
  const std::string& _internal_dataset() const;
  void _internal_set_dataset(const std::string& value);
  std::string* _internal_mutable_dataset();
  public:

  // optional .task.ParameterInfo parameter_info = 10;
  bool has_parameter_info() const;
  private:
  bool _internal_has_parameter_info() const;
  public:
  void clear_parameter_info();
  const ::task::ParameterInfo& parameter_info() const;
  ::task::ParameterInfo* release_parameter_info();
  ::task::ParameterInfo* mutable_parameter_info();
  void set_allocated_parameter_info(::task::ParameterInfo* parameter_info);
  private:
  const ::task::ParameterInfo& _internal_parameter_info() const;
  ::task::ParameterInfo* _internal_mutable_parameter_info();
  public:

  // optional uint32 num_workers = 1;
  bool has_num_workers() const;
  private:
  bool _internal_has_num_workers() const;
  public:
  void clear_num_workers();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_workers() const;
  void set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_workers() const;
  void _internal_set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_servers = 2;
  bool has_num_servers() const;
  private:
  bool _internal_has_num_servers() const;
  public:
  void clear_num_servers();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_servers() const;
  void set_num_servers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_servers() const;
  void _internal_set_num_servers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:task.DistInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_division_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_division_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_;
  ::task::ParameterInfo* parameter_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_workers_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_servers_;
  friend struct ::TableStruct_transport_5finfo_2eproto;
};
// -------------------------------------------------------------------

class ParameterInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:task.ParameterInfo) */ {
 public:
  ParameterInfo();
  virtual ~ParameterInfo();

  ParameterInfo(const ParameterInfo& from);
  ParameterInfo(ParameterInfo&& from) noexcept
    : ParameterInfo() {
    *this = ::std::move(from);
  }

  inline ParameterInfo& operator=(const ParameterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterInfo& operator=(ParameterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParameterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParameterInfo* internal_default_instance() {
    return reinterpret_cast<const ParameterInfo*>(
               &_ParameterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ParameterInfo& a, ParameterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParameterInfo* New() const final {
    return CreateMaybeMessage<ParameterInfo>(nullptr);
  }

  ParameterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParameterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParameterInfo& from);
  void MergeFrom(const ParameterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "task.ParameterInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5finfo_2eproto);
    return ::descriptor_table_transport_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParameterInitializeFieldNumber = 2,
    kParameterLoadPathFieldNumber = 3,
    kPataStorePathFieldNumber = 4,
  };
  // optional string parameter_initialize = 2;
  bool has_parameter_initialize() const;
  private:
  bool _internal_has_parameter_initialize() const;
  public:
  void clear_parameter_initialize();
  const std::string& parameter_initialize() const;
  void set_parameter_initialize(const std::string& value);
  void set_parameter_initialize(std::string&& value);
  void set_parameter_initialize(const char* value);
  void set_parameter_initialize(const char* value, size_t size);
  std::string* mutable_parameter_initialize();
  std::string* release_parameter_initialize();
  void set_allocated_parameter_initialize(std::string* parameter_initialize);
  private:
  const std::string& _internal_parameter_initialize() const;
  void _internal_set_parameter_initialize(const std::string& value);
  std::string* _internal_mutable_parameter_initialize();
  public:

  // optional string parameter_load_path = 3;
  bool has_parameter_load_path() const;
  private:
  bool _internal_has_parameter_load_path() const;
  public:
  void clear_parameter_load_path();
  const std::string& parameter_load_path() const;
  void set_parameter_load_path(const std::string& value);
  void set_parameter_load_path(std::string&& value);
  void set_parameter_load_path(const char* value);
  void set_parameter_load_path(const char* value, size_t size);
  std::string* mutable_parameter_load_path();
  std::string* release_parameter_load_path();
  void set_allocated_parameter_load_path(std::string* parameter_load_path);
  private:
  const std::string& _internal_parameter_load_path() const;
  void _internal_set_parameter_load_path(const std::string& value);
  std::string* _internal_mutable_parameter_load_path();
  public:

  // optional string pata_store_path = 4;
  bool has_pata_store_path() const;
  private:
  bool _internal_has_pata_store_path() const;
  public:
  void clear_pata_store_path();
  const std::string& pata_store_path() const;
  void set_pata_store_path(const std::string& value);
  void set_pata_store_path(std::string&& value);
  void set_pata_store_path(const char* value);
  void set_pata_store_path(const char* value, size_t size);
  std::string* mutable_pata_store_path();
  std::string* release_pata_store_path();
  void set_allocated_pata_store_path(std::string* pata_store_path);
  private:
  const std::string& _internal_pata_store_path() const;
  void _internal_set_pata_store_path(const std::string& value);
  std::string* _internal_mutable_pata_store_path();
  public:

  // @@protoc_insertion_point(class_scope:task.ParameterInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameter_initialize_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameter_load_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pata_store_path_;
  friend struct ::TableStruct_transport_5finfo_2eproto;
};
// -------------------------------------------------------------------

class NetworkStruct :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:task.NetworkStruct) */ {
 public:
  NetworkStruct();
  virtual ~NetworkStruct();

  NetworkStruct(const NetworkStruct& from);
  NetworkStruct(NetworkStruct&& from) noexcept
    : NetworkStruct() {
    *this = ::std::move(from);
  }

  inline NetworkStruct& operator=(const NetworkStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkStruct& operator=(NetworkStruct&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkStruct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkStruct* internal_default_instance() {
    return reinterpret_cast<const NetworkStruct*>(
               &_NetworkStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NetworkStruct& a, NetworkStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkStruct* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkStruct* New() const final {
    return CreateMaybeMessage<NetworkStruct>(nullptr);
  }

  NetworkStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkStruct>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkStruct& from);
  void MergeFrom(const NetworkStruct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkStruct* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "task.NetworkStruct";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5finfo_2eproto);
    return ::descriptor_table_transport_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 100,
    kHparameterFieldNumber = 2,
    kNumsLayersFieldNumber = 1,
  };
  // repeated .task.Layer layers = 100;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::task::Layer* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Layer >*
      mutable_layers();
  private:
  const ::task::Layer& _internal_layers(int index) const;
  ::task::Layer* _internal_add_layers();
  public:
  const ::task::Layer& layers(int index) const;
  ::task::Layer* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Layer >&
      layers() const;

  // optional .task.HyperParameter hparameter = 2;
  bool has_hparameter() const;
  private:
  bool _internal_has_hparameter() const;
  public:
  void clear_hparameter();
  const ::task::HyperParameter& hparameter() const;
  ::task::HyperParameter* release_hparameter();
  ::task::HyperParameter* mutable_hparameter();
  void set_allocated_hparameter(::task::HyperParameter* hparameter);
  private:
  const ::task::HyperParameter& _internal_hparameter() const;
  ::task::HyperParameter* _internal_mutable_hparameter();
  public:

  // optional uint32 nums_layers = 1;
  bool has_nums_layers() const;
  private:
  bool _internal_has_nums_layers() const;
  public:
  void clear_nums_layers();
  ::PROTOBUF_NAMESPACE_ID::uint32 nums_layers() const;
  void set_nums_layers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nums_layers() const;
  void _internal_set_nums_layers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:task.NetworkStruct)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Layer > layers_;
  ::task::HyperParameter* hparameter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nums_layers_;
  friend struct ::TableStruct_transport_5finfo_2eproto;
};
// -------------------------------------------------------------------

class Layer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:task.Layer) */ {
 public:
  Layer();
  virtual ~Layer();

  Layer(const Layer& from);
  Layer(Layer&& from) noexcept
    : Layer() {
    *this = ::std::move(from);
  }

  inline Layer& operator=(const Layer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Layer& operator=(Layer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Layer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Layer* internal_default_instance() {
    return reinterpret_cast<const Layer*>(
               &_Layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Layer& a, Layer& b) {
    a.Swap(&b);
  }
  inline void Swap(Layer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Layer* New() const final {
    return CreateMaybeMessage<Layer>(nullptr);
  }

  Layer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Layer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Layer& from);
  void MergeFrom(const Layer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Layer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "task.Layer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5finfo_2eproto);
    return ::descriptor_table_transport_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParameterListFieldNumber = 100,
    kNameFieldNumber = 1,
    kActivationFieldNumber = 2,
    kOutputSizeFieldNumber = 3,
  };
  // repeated .task.Parameter parameter_list = 100;
  int parameter_list_size() const;
  private:
  int _internal_parameter_list_size() const;
  public:
  void clear_parameter_list();
  ::task::Parameter* mutable_parameter_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Parameter >*
      mutable_parameter_list();
  private:
  const ::task::Parameter& _internal_parameter_list(int index) const;
  ::task::Parameter* _internal_add_parameter_list();
  public:
  const ::task::Parameter& parameter_list(int index) const;
  ::task::Parameter* add_parameter_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Parameter >&
      parameter_list() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string activation = 2;
  bool has_activation() const;
  private:
  bool _internal_has_activation() const;
  public:
  void clear_activation();
  const std::string& activation() const;
  void set_activation(const std::string& value);
  void set_activation(std::string&& value);
  void set_activation(const char* value);
  void set_activation(const char* value, size_t size);
  std::string* mutable_activation();
  std::string* release_activation();
  void set_allocated_activation(std::string* activation);
  private:
  const std::string& _internal_activation() const;
  void _internal_set_activation(const std::string& value);
  std::string* _internal_mutable_activation();
  public:

  // optional uint32 output_size = 3;
  bool has_output_size() const;
  private:
  bool _internal_has_output_size() const;
  public:
  void clear_output_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 output_size() const;
  void set_output_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_output_size() const;
  void _internal_set_output_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:task.Layer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Parameter > parameter_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 output_size_;
  friend struct ::TableStruct_transport_5finfo_2eproto;
};
// -------------------------------------------------------------------

class Parameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:task.Parameter) */ {
 public:
  Parameter();
  virtual ~Parameter();

  Parameter(const Parameter& from);
  Parameter(Parameter&& from) noexcept
    : Parameter() {
    *this = ::std::move(from);
  }

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parameter& operator=(Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Parameter* internal_default_instance() {
    return reinterpret_cast<const Parameter*>(
               &_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Parameter& a, Parameter& b) {
    a.Swap(&b);
  }
  inline void Swap(Parameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Parameter* New() const final {
    return CreateMaybeMessage<Parameter>(nullptr);
  }

  Parameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Parameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "task.Parameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5finfo_2eproto);
    return ::descriptor_table_transport_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Parameter_Data_type Data_type;
  static constexpr Data_type int8 =
    Parameter_Data_type_int8;
  static constexpr Data_type float16 =
    Parameter_Data_type_float16;
  static constexpr Data_type float32 =
    Parameter_Data_type_float32;
  static constexpr Data_type float64 =
    Parameter_Data_type_float64;
  static inline bool Data_type_IsValid(int value) {
    return Parameter_Data_type_IsValid(value);
  }
  static constexpr Data_type Data_type_MIN =
    Parameter_Data_type_Data_type_MIN;
  static constexpr Data_type Data_type_MAX =
    Parameter_Data_type_Data_type_MAX;
  static constexpr int Data_type_ARRAYSIZE =
    Parameter_Data_type_Data_type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Data_type_descriptor() {
    return Parameter_Data_type_descriptor();
  }
  template<typename T>
  static inline const std::string& Data_type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Data_type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Data_type_Name.");
    return Parameter_Data_type_Name(enum_t_value);
  }
  static inline bool Data_type_Parse(const std::string& name,
      Data_type* value) {
    return Parameter_Data_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 3,
    kKeyFieldNumber = 1,
    kDimFieldNumber = 2,
    kDataTypeFieldNumber = 4,
  };
  // repeated uint32 shape = 3;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_shape();

  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional uint32 dim = 2;
  bool has_dim() const;
  private:
  bool _internal_has_dim() const;
  public:
  void clear_dim();
  ::PROTOBUF_NAMESPACE_ID::uint32 dim() const;
  void set_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dim() const;
  void _internal_set_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .task.Parameter.Data_type data_type = 4;
  bool has_data_type() const;
  private:
  bool _internal_has_data_type() const;
  public:
  void clear_data_type();
  ::task::Parameter_Data_type data_type() const;
  void set_data_type(::task::Parameter_Data_type value);
  private:
  ::task::Parameter_Data_type _internal_data_type() const;
  void _internal_set_data_type(::task::Parameter_Data_type value);
  public:

  // @@protoc_insertion_point(class_scope:task.Parameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > shape_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dim_;
  int data_type_;
  friend struct ::TableStruct_transport_5finfo_2eproto;
};
// -------------------------------------------------------------------

class HyperParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:task.HyperParameter) */ {
 public:
  HyperParameter();
  virtual ~HyperParameter();

  HyperParameter(const HyperParameter& from);
  HyperParameter(HyperParameter&& from) noexcept
    : HyperParameter() {
    *this = ::std::move(from);
  }

  inline HyperParameter& operator=(const HyperParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline HyperParameter& operator=(HyperParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HyperParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HyperParameter* internal_default_instance() {
    return reinterpret_cast<const HyperParameter*>(
               &_HyperParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HyperParameter& a, HyperParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(HyperParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HyperParameter* New() const final {
    return CreateMaybeMessage<HyperParameter>(nullptr);
  }

  HyperParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HyperParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HyperParameter& from);
  void MergeFrom(const HyperParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HyperParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "task.HyperParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5finfo_2eproto);
    return ::descriptor_table_transport_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptimizerFieldNumber = 1,
    kLossFieldNumber = 5,
    kConsistencyFieldNumber = 6,
    kLearningRateFieldNumber = 2,
    kMiniBatchSizeFieldNumber = 3,
    kEpochFieldNumber = 4,
  };
  // optional string optimizer = 1;
  bool has_optimizer() const;
  private:
  bool _internal_has_optimizer() const;
  public:
  void clear_optimizer();
  const std::string& optimizer() const;
  void set_optimizer(const std::string& value);
  void set_optimizer(std::string&& value);
  void set_optimizer(const char* value);
  void set_optimizer(const char* value, size_t size);
  std::string* mutable_optimizer();
  std::string* release_optimizer();
  void set_allocated_optimizer(std::string* optimizer);
  private:
  const std::string& _internal_optimizer() const;
  void _internal_set_optimizer(const std::string& value);
  std::string* _internal_mutable_optimizer();
  public:

  // optional string loss = 5;
  bool has_loss() const;
  private:
  bool _internal_has_loss() const;
  public:
  void clear_loss();
  const std::string& loss() const;
  void set_loss(const std::string& value);
  void set_loss(std::string&& value);
  void set_loss(const char* value);
  void set_loss(const char* value, size_t size);
  std::string* mutable_loss();
  std::string* release_loss();
  void set_allocated_loss(std::string* loss);
  private:
  const std::string& _internal_loss() const;
  void _internal_set_loss(const std::string& value);
  std::string* _internal_mutable_loss();
  public:

  // optional string consistency = 6;
  bool has_consistency() const;
  private:
  bool _internal_has_consistency() const;
  public:
  void clear_consistency();
  const std::string& consistency() const;
  void set_consistency(const std::string& value);
  void set_consistency(std::string&& value);
  void set_consistency(const char* value);
  void set_consistency(const char* value, size_t size);
  std::string* mutable_consistency();
  std::string* release_consistency();
  void set_allocated_consistency(std::string* consistency);
  private:
  const std::string& _internal_consistency() const;
  void _internal_set_consistency(const std::string& value);
  std::string* _internal_mutable_consistency();
  public:

  // optional float learning_rate = 2;
  bool has_learning_rate() const;
  private:
  bool _internal_has_learning_rate() const;
  public:
  void clear_learning_rate();
  float learning_rate() const;
  void set_learning_rate(float value);
  private:
  float _internal_learning_rate() const;
  void _internal_set_learning_rate(float value);
  public:

  // optional uint32 mini_batch_size = 3;
  bool has_mini_batch_size() const;
  private:
  bool _internal_has_mini_batch_size() const;
  public:
  void clear_mini_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 mini_batch_size() const;
  void set_mini_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mini_batch_size() const;
  void _internal_set_mini_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 epoch = 4;
  bool has_epoch() const;
  private:
  bool _internal_has_epoch() const;
  public:
  void clear_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch() const;
  void set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_epoch() const;
  void _internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:task.HyperParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optimizer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loss_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consistency_;
  float learning_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mini_batch_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch_;
  friend struct ::TableStruct_transport_5finfo_2eproto;
};
// -------------------------------------------------------------------

class ServerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:task.ServerInfo) */ {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const final {
    return CreateMaybeMessage<ServerInfo>(nullptr);
  }

  ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "task.ServerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5finfo_2eproto);
    return ::descriptor_table_transport_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // optional string ip = 1;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional uint32 port = 2;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:task.ServerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  friend struct ::TableStruct_transport_5finfo_2eproto;
};
// -------------------------------------------------------------------

class ServerTask :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:task.ServerTask) */ {
 public:
  ServerTask();
  virtual ~ServerTask();

  ServerTask(const ServerTask& from);
  ServerTask(ServerTask&& from) noexcept
    : ServerTask() {
    *this = ::std::move(from);
  }

  inline ServerTask& operator=(const ServerTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerTask& operator=(ServerTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerTask* internal_default_instance() {
    return reinterpret_cast<const ServerTask*>(
               &_ServerTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ServerTask& a, ServerTask& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerTask* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerTask* New() const final {
    return CreateMaybeMessage<ServerTask>(nullptr);
  }

  ServerTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerTask& from);
  void MergeFrom(const ServerTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "task.ServerTask";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5finfo_2eproto);
    return ::descriptor_table_transport_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParameterListFieldNumber = 100,
    kOptimizerFieldNumber = 1,
    kLearningRateFieldNumber = 2,
    kEpochFieldNumber = 6,
  };
  // repeated .task.Parameter parameter_list = 100;
  int parameter_list_size() const;
  private:
  int _internal_parameter_list_size() const;
  public:
  void clear_parameter_list();
  ::task::Parameter* mutable_parameter_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Parameter >*
      mutable_parameter_list();
  private:
  const ::task::Parameter& _internal_parameter_list(int index) const;
  ::task::Parameter* _internal_add_parameter_list();
  public:
  const ::task::Parameter& parameter_list(int index) const;
  ::task::Parameter* add_parameter_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Parameter >&
      parameter_list() const;

  // optional string optimizer = 1;
  bool has_optimizer() const;
  private:
  bool _internal_has_optimizer() const;
  public:
  void clear_optimizer();
  const std::string& optimizer() const;
  void set_optimizer(const std::string& value);
  void set_optimizer(std::string&& value);
  void set_optimizer(const char* value);
  void set_optimizer(const char* value, size_t size);
  std::string* mutable_optimizer();
  std::string* release_optimizer();
  void set_allocated_optimizer(std::string* optimizer);
  private:
  const std::string& _internal_optimizer() const;
  void _internal_set_optimizer(const std::string& value);
  std::string* _internal_mutable_optimizer();
  public:

  // optional float learning_rate = 2;
  bool has_learning_rate() const;
  private:
  bool _internal_has_learning_rate() const;
  public:
  void clear_learning_rate();
  float learning_rate() const;
  void set_learning_rate(float value);
  private:
  float _internal_learning_rate() const;
  void _internal_set_learning_rate(float value);
  public:

  // optional uint32 epoch = 6;
  bool has_epoch() const;
  private:
  bool _internal_has_epoch() const;
  public:
  void clear_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch() const;
  void set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_epoch() const;
  void _internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:task.ServerTask)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Parameter > parameter_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optimizer_;
  float learning_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch_;
  friend struct ::TableStruct_transport_5finfo_2eproto;
};
// -------------------------------------------------------------------

class WorkerTask :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:task.WorkerTask) */ {
 public:
  WorkerTask();
  virtual ~WorkerTask();

  WorkerTask(const WorkerTask& from);
  WorkerTask(WorkerTask&& from) noexcept
    : WorkerTask() {
    *this = ::std::move(from);
  }

  inline WorkerTask& operator=(const WorkerTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerTask& operator=(WorkerTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkerTask* internal_default_instance() {
    return reinterpret_cast<const WorkerTask*>(
               &_WorkerTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WorkerTask& a, WorkerTask& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerTask* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerTask* New() const final {
    return CreateMaybeMessage<WorkerTask>(nullptr);
  }

  WorkerTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerTask& from);
  void MergeFrom(const WorkerTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "task.WorkerTask";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5finfo_2eproto);
    return ::descriptor_table_transport_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServersFieldNumber = 10,
    kLayersFieldNumber = 100,
    kDataPathFieldNumber = 1,
    kDataDivisionFieldNumber = 2,
    kLossFieldNumber = 5,
    kConsistencyFieldNumber = 7,
    kDatasetFieldNumber = 11,
    kNumsLayersFieldNumber = 3,
    kMiniBatchSizeFieldNumber = 4,
    kEpochFieldNumber = 6,
  };
  // repeated .task.ServerInfo servers = 10;
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  ::task::ServerInfo* mutable_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::ServerInfo >*
      mutable_servers();
  private:
  const ::task::ServerInfo& _internal_servers(int index) const;
  ::task::ServerInfo* _internal_add_servers();
  public:
  const ::task::ServerInfo& servers(int index) const;
  ::task::ServerInfo* add_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::ServerInfo >&
      servers() const;

  // repeated .task.Layer layers = 100;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::task::Layer* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Layer >*
      mutable_layers();
  private:
  const ::task::Layer& _internal_layers(int index) const;
  ::task::Layer* _internal_add_layers();
  public:
  const ::task::Layer& layers(int index) const;
  ::task::Layer* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Layer >&
      layers() const;

  // optional string data_path = 1;
  bool has_data_path() const;
  private:
  bool _internal_has_data_path() const;
  public:
  void clear_data_path();
  const std::string& data_path() const;
  void set_data_path(const std::string& value);
  void set_data_path(std::string&& value);
  void set_data_path(const char* value);
  void set_data_path(const char* value, size_t size);
  std::string* mutable_data_path();
  std::string* release_data_path();
  void set_allocated_data_path(std::string* data_path);
  private:
  const std::string& _internal_data_path() const;
  void _internal_set_data_path(const std::string& value);
  std::string* _internal_mutable_data_path();
  public:

  // optional string data_division = 2;
  bool has_data_division() const;
  private:
  bool _internal_has_data_division() const;
  public:
  void clear_data_division();
  const std::string& data_division() const;
  void set_data_division(const std::string& value);
  void set_data_division(std::string&& value);
  void set_data_division(const char* value);
  void set_data_division(const char* value, size_t size);
  std::string* mutable_data_division();
  std::string* release_data_division();
  void set_allocated_data_division(std::string* data_division);
  private:
  const std::string& _internal_data_division() const;
  void _internal_set_data_division(const std::string& value);
  std::string* _internal_mutable_data_division();
  public:

  // optional string loss = 5;
  bool has_loss() const;
  private:
  bool _internal_has_loss() const;
  public:
  void clear_loss();
  const std::string& loss() const;
  void set_loss(const std::string& value);
  void set_loss(std::string&& value);
  void set_loss(const char* value);
  void set_loss(const char* value, size_t size);
  std::string* mutable_loss();
  std::string* release_loss();
  void set_allocated_loss(std::string* loss);
  private:
  const std::string& _internal_loss() const;
  void _internal_set_loss(const std::string& value);
  std::string* _internal_mutable_loss();
  public:

  // optional string consistency = 7;
  bool has_consistency() const;
  private:
  bool _internal_has_consistency() const;
  public:
  void clear_consistency();
  const std::string& consistency() const;
  void set_consistency(const std::string& value);
  void set_consistency(std::string&& value);
  void set_consistency(const char* value);
  void set_consistency(const char* value, size_t size);
  std::string* mutable_consistency();
  std::string* release_consistency();
  void set_allocated_consistency(std::string* consistency);
  private:
  const std::string& _internal_consistency() const;
  void _internal_set_consistency(const std::string& value);
  std::string* _internal_mutable_consistency();
  public:

  // optional string dataset = 11;
  bool has_dataset() const;
  private:
  bool _internal_has_dataset() const;
  public:
  void clear_dataset();
  const std::string& dataset() const;
  void set_dataset(const std::string& value);
  void set_dataset(std::string&& value);
  void set_dataset(const char* value);
  void set_dataset(const char* value, size_t size);
  std::string* mutable_dataset();
  std::string* release_dataset();
  void set_allocated_dataset(std::string* dataset);
  private:
  const std::string& _internal_dataset() const;
  void _internal_set_dataset(const std::string& value);
  std::string* _internal_mutable_dataset();
  public:

  // optional uint32 nums_layers = 3;
  bool has_nums_layers() const;
  private:
  bool _internal_has_nums_layers() const;
  public:
  void clear_nums_layers();
  ::PROTOBUF_NAMESPACE_ID::uint32 nums_layers() const;
  void set_nums_layers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nums_layers() const;
  void _internal_set_nums_layers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mini_batch_size = 4;
  bool has_mini_batch_size() const;
  private:
  bool _internal_has_mini_batch_size() const;
  public:
  void clear_mini_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 mini_batch_size() const;
  void set_mini_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mini_batch_size() const;
  void _internal_set_mini_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 epoch = 6;
  bool has_epoch() const;
  private:
  bool _internal_has_epoch() const;
  public:
  void clear_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch() const;
  void set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_epoch() const;
  void _internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:task.WorkerTask)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::ServerInfo > servers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Layer > layers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_division_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loss_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consistency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nums_layers_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mini_batch_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch_;
  friend struct ::TableStruct_transport_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DistInfo

// optional uint32 num_workers = 1;
inline bool DistInfo::_internal_has_num_workers() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DistInfo::has_num_workers() const {
  return _internal_has_num_workers();
}
inline void DistInfo::clear_num_workers() {
  num_workers_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DistInfo::_internal_num_workers() const {
  return num_workers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DistInfo::num_workers() const {
  // @@protoc_insertion_point(field_get:task.DistInfo.num_workers)
  return _internal_num_workers();
}
inline void DistInfo::_internal_set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_workers_ = value;
}
inline void DistInfo::set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_workers(value);
  // @@protoc_insertion_point(field_set:task.DistInfo.num_workers)
}

// optional uint32 num_servers = 2;
inline bool DistInfo::_internal_has_num_servers() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DistInfo::has_num_servers() const {
  return _internal_has_num_servers();
}
inline void DistInfo::clear_num_servers() {
  num_servers_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DistInfo::_internal_num_servers() const {
  return num_servers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DistInfo::num_servers() const {
  // @@protoc_insertion_point(field_get:task.DistInfo.num_servers)
  return _internal_num_servers();
}
inline void DistInfo::_internal_set_num_servers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  num_servers_ = value;
}
inline void DistInfo::set_num_servers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_servers(value);
  // @@protoc_insertion_point(field_set:task.DistInfo.num_servers)
}

// optional .task.ParameterInfo parameter_info = 10;
inline bool DistInfo::_internal_has_parameter_info() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || parameter_info_ != nullptr);
  return value;
}
inline bool DistInfo::has_parameter_info() const {
  return _internal_has_parameter_info();
}
inline void DistInfo::clear_parameter_info() {
  if (parameter_info_ != nullptr) parameter_info_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::task::ParameterInfo& DistInfo::_internal_parameter_info() const {
  const ::task::ParameterInfo* p = parameter_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::task::ParameterInfo*>(
      &::task::_ParameterInfo_default_instance_);
}
inline const ::task::ParameterInfo& DistInfo::parameter_info() const {
  // @@protoc_insertion_point(field_get:task.DistInfo.parameter_info)
  return _internal_parameter_info();
}
inline ::task::ParameterInfo* DistInfo::release_parameter_info() {
  // @@protoc_insertion_point(field_release:task.DistInfo.parameter_info)
  _has_bits_[0] &= ~0x00000010u;
  ::task::ParameterInfo* temp = parameter_info_;
  parameter_info_ = nullptr;
  return temp;
}
inline ::task::ParameterInfo* DistInfo::_internal_mutable_parameter_info() {
  _has_bits_[0] |= 0x00000010u;
  if (parameter_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::task::ParameterInfo>(GetArenaNoVirtual());
    parameter_info_ = p;
  }
  return parameter_info_;
}
inline ::task::ParameterInfo* DistInfo::mutable_parameter_info() {
  // @@protoc_insertion_point(field_mutable:task.DistInfo.parameter_info)
  return _internal_mutable_parameter_info();
}
inline void DistInfo::set_allocated_parameter_info(::task::ParameterInfo* parameter_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parameter_info_;
  }
  if (parameter_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parameter_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameter_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  parameter_info_ = parameter_info;
  // @@protoc_insertion_point(field_set_allocated:task.DistInfo.parameter_info)
}

// optional string data_path = 3;
inline bool DistInfo::_internal_has_data_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DistInfo::has_data_path() const {
  return _internal_has_data_path();
}
inline void DistInfo::clear_data_path() {
  data_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DistInfo::data_path() const {
  // @@protoc_insertion_point(field_get:task.DistInfo.data_path)
  return _internal_data_path();
}
inline void DistInfo::set_data_path(const std::string& value) {
  _internal_set_data_path(value);
  // @@protoc_insertion_point(field_set:task.DistInfo.data_path)
}
inline std::string* DistInfo::mutable_data_path() {
  // @@protoc_insertion_point(field_mutable:task.DistInfo.data_path)
  return _internal_mutable_data_path();
}
inline const std::string& DistInfo::_internal_data_path() const {
  return data_path_.GetNoArena();
}
inline void DistInfo::_internal_set_data_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DistInfo::set_data_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.DistInfo.data_path)
}
inline void DistInfo::set_data_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.DistInfo.data_path)
}
inline void DistInfo::set_data_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.DistInfo.data_path)
}
inline std::string* DistInfo::_internal_mutable_data_path() {
  _has_bits_[0] |= 0x00000001u;
  return data_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DistInfo::release_data_path() {
  // @@protoc_insertion_point(field_release:task.DistInfo.data_path)
  if (!_internal_has_data_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DistInfo::set_allocated_data_path(std::string* data_path) {
  if (data_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_path);
  // @@protoc_insertion_point(field_set_allocated:task.DistInfo.data_path)
}

// optional string data_division = 4;
inline bool DistInfo::_internal_has_data_division() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DistInfo::has_data_division() const {
  return _internal_has_data_division();
}
inline void DistInfo::clear_data_division() {
  data_division_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DistInfo::data_division() const {
  // @@protoc_insertion_point(field_get:task.DistInfo.data_division)
  return _internal_data_division();
}
inline void DistInfo::set_data_division(const std::string& value) {
  _internal_set_data_division(value);
  // @@protoc_insertion_point(field_set:task.DistInfo.data_division)
}
inline std::string* DistInfo::mutable_data_division() {
  // @@protoc_insertion_point(field_mutable:task.DistInfo.data_division)
  return _internal_mutable_data_division();
}
inline const std::string& DistInfo::_internal_data_division() const {
  return data_division_.GetNoArena();
}
inline void DistInfo::_internal_set_data_division(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_division_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DistInfo::set_data_division(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  data_division_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.DistInfo.data_division)
}
inline void DistInfo::set_data_division(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  data_division_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.DistInfo.data_division)
}
inline void DistInfo::set_data_division(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  data_division_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.DistInfo.data_division)
}
inline std::string* DistInfo::_internal_mutable_data_division() {
  _has_bits_[0] |= 0x00000002u;
  return data_division_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DistInfo::release_data_division() {
  // @@protoc_insertion_point(field_release:task.DistInfo.data_division)
  if (!_internal_has_data_division()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return data_division_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DistInfo::set_allocated_data_division(std::string* data_division) {
  if (data_division != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_division_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_division);
  // @@protoc_insertion_point(field_set_allocated:task.DistInfo.data_division)
}

// optional string model_division = 5;
inline bool DistInfo::_internal_has_model_division() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DistInfo::has_model_division() const {
  return _internal_has_model_division();
}
inline void DistInfo::clear_model_division() {
  model_division_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DistInfo::model_division() const {
  // @@protoc_insertion_point(field_get:task.DistInfo.model_division)
  return _internal_model_division();
}
inline void DistInfo::set_model_division(const std::string& value) {
  _internal_set_model_division(value);
  // @@protoc_insertion_point(field_set:task.DistInfo.model_division)
}
inline std::string* DistInfo::mutable_model_division() {
  // @@protoc_insertion_point(field_mutable:task.DistInfo.model_division)
  return _internal_mutable_model_division();
}
inline const std::string& DistInfo::_internal_model_division() const {
  return model_division_.GetNoArena();
}
inline void DistInfo::_internal_set_model_division(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  model_division_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DistInfo::set_model_division(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  model_division_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.DistInfo.model_division)
}
inline void DistInfo::set_model_division(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  model_division_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.DistInfo.model_division)
}
inline void DistInfo::set_model_division(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  model_division_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.DistInfo.model_division)
}
inline std::string* DistInfo::_internal_mutable_model_division() {
  _has_bits_[0] |= 0x00000004u;
  return model_division_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DistInfo::release_model_division() {
  // @@protoc_insertion_point(field_release:task.DistInfo.model_division)
  if (!_internal_has_model_division()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return model_division_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DistInfo::set_allocated_model_division(std::string* model_division) {
  if (model_division != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  model_division_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_division);
  // @@protoc_insertion_point(field_set_allocated:task.DistInfo.model_division)
}

// optional string dataset = 6;
inline bool DistInfo::_internal_has_dataset() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DistInfo::has_dataset() const {
  return _internal_has_dataset();
}
inline void DistInfo::clear_dataset() {
  dataset_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DistInfo::dataset() const {
  // @@protoc_insertion_point(field_get:task.DistInfo.dataset)
  return _internal_dataset();
}
inline void DistInfo::set_dataset(const std::string& value) {
  _internal_set_dataset(value);
  // @@protoc_insertion_point(field_set:task.DistInfo.dataset)
}
inline std::string* DistInfo::mutable_dataset() {
  // @@protoc_insertion_point(field_mutable:task.DistInfo.dataset)
  return _internal_mutable_dataset();
}
inline const std::string& DistInfo::_internal_dataset() const {
  return dataset_.GetNoArena();
}
inline void DistInfo::_internal_set_dataset(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  dataset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DistInfo::set_dataset(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  dataset_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.DistInfo.dataset)
}
inline void DistInfo::set_dataset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  dataset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.DistInfo.dataset)
}
inline void DistInfo::set_dataset(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  dataset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.DistInfo.dataset)
}
inline std::string* DistInfo::_internal_mutable_dataset() {
  _has_bits_[0] |= 0x00000008u;
  return dataset_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DistInfo::release_dataset() {
  // @@protoc_insertion_point(field_release:task.DistInfo.dataset)
  if (!_internal_has_dataset()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return dataset_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DistInfo::set_allocated_dataset(std::string* dataset) {
  if (dataset != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  dataset_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset);
  // @@protoc_insertion_point(field_set_allocated:task.DistInfo.dataset)
}

// -------------------------------------------------------------------

// ParameterInfo

// optional string parameter_initialize = 2;
inline bool ParameterInfo::_internal_has_parameter_initialize() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ParameterInfo::has_parameter_initialize() const {
  return _internal_has_parameter_initialize();
}
inline void ParameterInfo::clear_parameter_initialize() {
  parameter_initialize_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ParameterInfo::parameter_initialize() const {
  // @@protoc_insertion_point(field_get:task.ParameterInfo.parameter_initialize)
  return _internal_parameter_initialize();
}
inline void ParameterInfo::set_parameter_initialize(const std::string& value) {
  _internal_set_parameter_initialize(value);
  // @@protoc_insertion_point(field_set:task.ParameterInfo.parameter_initialize)
}
inline std::string* ParameterInfo::mutable_parameter_initialize() {
  // @@protoc_insertion_point(field_mutable:task.ParameterInfo.parameter_initialize)
  return _internal_mutable_parameter_initialize();
}
inline const std::string& ParameterInfo::_internal_parameter_initialize() const {
  return parameter_initialize_.GetNoArena();
}
inline void ParameterInfo::_internal_set_parameter_initialize(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  parameter_initialize_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ParameterInfo::set_parameter_initialize(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  parameter_initialize_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.ParameterInfo.parameter_initialize)
}
inline void ParameterInfo::set_parameter_initialize(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  parameter_initialize_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.ParameterInfo.parameter_initialize)
}
inline void ParameterInfo::set_parameter_initialize(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  parameter_initialize_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.ParameterInfo.parameter_initialize)
}
inline std::string* ParameterInfo::_internal_mutable_parameter_initialize() {
  _has_bits_[0] |= 0x00000001u;
  return parameter_initialize_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ParameterInfo::release_parameter_initialize() {
  // @@protoc_insertion_point(field_release:task.ParameterInfo.parameter_initialize)
  if (!_internal_has_parameter_initialize()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return parameter_initialize_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ParameterInfo::set_allocated_parameter_initialize(std::string* parameter_initialize) {
  if (parameter_initialize != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  parameter_initialize_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parameter_initialize);
  // @@protoc_insertion_point(field_set_allocated:task.ParameterInfo.parameter_initialize)
}

// optional string parameter_load_path = 3;
inline bool ParameterInfo::_internal_has_parameter_load_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ParameterInfo::has_parameter_load_path() const {
  return _internal_has_parameter_load_path();
}
inline void ParameterInfo::clear_parameter_load_path() {
  parameter_load_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ParameterInfo::parameter_load_path() const {
  // @@protoc_insertion_point(field_get:task.ParameterInfo.parameter_load_path)
  return _internal_parameter_load_path();
}
inline void ParameterInfo::set_parameter_load_path(const std::string& value) {
  _internal_set_parameter_load_path(value);
  // @@protoc_insertion_point(field_set:task.ParameterInfo.parameter_load_path)
}
inline std::string* ParameterInfo::mutable_parameter_load_path() {
  // @@protoc_insertion_point(field_mutable:task.ParameterInfo.parameter_load_path)
  return _internal_mutable_parameter_load_path();
}
inline const std::string& ParameterInfo::_internal_parameter_load_path() const {
  return parameter_load_path_.GetNoArena();
}
inline void ParameterInfo::_internal_set_parameter_load_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  parameter_load_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ParameterInfo::set_parameter_load_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  parameter_load_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.ParameterInfo.parameter_load_path)
}
inline void ParameterInfo::set_parameter_load_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  parameter_load_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.ParameterInfo.parameter_load_path)
}
inline void ParameterInfo::set_parameter_load_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  parameter_load_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.ParameterInfo.parameter_load_path)
}
inline std::string* ParameterInfo::_internal_mutable_parameter_load_path() {
  _has_bits_[0] |= 0x00000002u;
  return parameter_load_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ParameterInfo::release_parameter_load_path() {
  // @@protoc_insertion_point(field_release:task.ParameterInfo.parameter_load_path)
  if (!_internal_has_parameter_load_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return parameter_load_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ParameterInfo::set_allocated_parameter_load_path(std::string* parameter_load_path) {
  if (parameter_load_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  parameter_load_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parameter_load_path);
  // @@protoc_insertion_point(field_set_allocated:task.ParameterInfo.parameter_load_path)
}

// optional string pata_store_path = 4;
inline bool ParameterInfo::_internal_has_pata_store_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ParameterInfo::has_pata_store_path() const {
  return _internal_has_pata_store_path();
}
inline void ParameterInfo::clear_pata_store_path() {
  pata_store_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ParameterInfo::pata_store_path() const {
  // @@protoc_insertion_point(field_get:task.ParameterInfo.pata_store_path)
  return _internal_pata_store_path();
}
inline void ParameterInfo::set_pata_store_path(const std::string& value) {
  _internal_set_pata_store_path(value);
  // @@protoc_insertion_point(field_set:task.ParameterInfo.pata_store_path)
}
inline std::string* ParameterInfo::mutable_pata_store_path() {
  // @@protoc_insertion_point(field_mutable:task.ParameterInfo.pata_store_path)
  return _internal_mutable_pata_store_path();
}
inline const std::string& ParameterInfo::_internal_pata_store_path() const {
  return pata_store_path_.GetNoArena();
}
inline void ParameterInfo::_internal_set_pata_store_path(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  pata_store_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ParameterInfo::set_pata_store_path(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  pata_store_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.ParameterInfo.pata_store_path)
}
inline void ParameterInfo::set_pata_store_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  pata_store_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.ParameterInfo.pata_store_path)
}
inline void ParameterInfo::set_pata_store_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  pata_store_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.ParameterInfo.pata_store_path)
}
inline std::string* ParameterInfo::_internal_mutable_pata_store_path() {
  _has_bits_[0] |= 0x00000004u;
  return pata_store_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ParameterInfo::release_pata_store_path() {
  // @@protoc_insertion_point(field_release:task.ParameterInfo.pata_store_path)
  if (!_internal_has_pata_store_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return pata_store_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ParameterInfo::set_allocated_pata_store_path(std::string* pata_store_path) {
  if (pata_store_path != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pata_store_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pata_store_path);
  // @@protoc_insertion_point(field_set_allocated:task.ParameterInfo.pata_store_path)
}

// -------------------------------------------------------------------

// NetworkStruct

// optional uint32 nums_layers = 1;
inline bool NetworkStruct::_internal_has_nums_layers() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetworkStruct::has_nums_layers() const {
  return _internal_has_nums_layers();
}
inline void NetworkStruct::clear_nums_layers() {
  nums_layers_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkStruct::_internal_nums_layers() const {
  return nums_layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkStruct::nums_layers() const {
  // @@protoc_insertion_point(field_get:task.NetworkStruct.nums_layers)
  return _internal_nums_layers();
}
inline void NetworkStruct::_internal_set_nums_layers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nums_layers_ = value;
}
inline void NetworkStruct::set_nums_layers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nums_layers(value);
  // @@protoc_insertion_point(field_set:task.NetworkStruct.nums_layers)
}

// optional .task.HyperParameter hparameter = 2;
inline bool NetworkStruct::_internal_has_hparameter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || hparameter_ != nullptr);
  return value;
}
inline bool NetworkStruct::has_hparameter() const {
  return _internal_has_hparameter();
}
inline void NetworkStruct::clear_hparameter() {
  if (hparameter_ != nullptr) hparameter_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::task::HyperParameter& NetworkStruct::_internal_hparameter() const {
  const ::task::HyperParameter* p = hparameter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::task::HyperParameter*>(
      &::task::_HyperParameter_default_instance_);
}
inline const ::task::HyperParameter& NetworkStruct::hparameter() const {
  // @@protoc_insertion_point(field_get:task.NetworkStruct.hparameter)
  return _internal_hparameter();
}
inline ::task::HyperParameter* NetworkStruct::release_hparameter() {
  // @@protoc_insertion_point(field_release:task.NetworkStruct.hparameter)
  _has_bits_[0] &= ~0x00000001u;
  ::task::HyperParameter* temp = hparameter_;
  hparameter_ = nullptr;
  return temp;
}
inline ::task::HyperParameter* NetworkStruct::_internal_mutable_hparameter() {
  _has_bits_[0] |= 0x00000001u;
  if (hparameter_ == nullptr) {
    auto* p = CreateMaybeMessage<::task::HyperParameter>(GetArenaNoVirtual());
    hparameter_ = p;
  }
  return hparameter_;
}
inline ::task::HyperParameter* NetworkStruct::mutable_hparameter() {
  // @@protoc_insertion_point(field_mutable:task.NetworkStruct.hparameter)
  return _internal_mutable_hparameter();
}
inline void NetworkStruct::set_allocated_hparameter(::task::HyperParameter* hparameter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hparameter_;
  }
  if (hparameter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hparameter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hparameter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hparameter_ = hparameter;
  // @@protoc_insertion_point(field_set_allocated:task.NetworkStruct.hparameter)
}

// repeated .task.Layer layers = 100;
inline int NetworkStruct::_internal_layers_size() const {
  return layers_.size();
}
inline int NetworkStruct::layers_size() const {
  return _internal_layers_size();
}
inline void NetworkStruct::clear_layers() {
  layers_.Clear();
}
inline ::task::Layer* NetworkStruct::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:task.NetworkStruct.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Layer >*
NetworkStruct::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:task.NetworkStruct.layers)
  return &layers_;
}
inline const ::task::Layer& NetworkStruct::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::task::Layer& NetworkStruct::layers(int index) const {
  // @@protoc_insertion_point(field_get:task.NetworkStruct.layers)
  return _internal_layers(index);
}
inline ::task::Layer* NetworkStruct::_internal_add_layers() {
  return layers_.Add();
}
inline ::task::Layer* NetworkStruct::add_layers() {
  // @@protoc_insertion_point(field_add:task.NetworkStruct.layers)
  return _internal_add_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Layer >&
NetworkStruct::layers() const {
  // @@protoc_insertion_point(field_list:task.NetworkStruct.layers)
  return layers_;
}

// -------------------------------------------------------------------

// Layer

// optional string name = 1;
inline bool Layer::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Layer::has_name() const {
  return _internal_has_name();
}
inline void Layer::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Layer::name() const {
  // @@protoc_insertion_point(field_get:task.Layer.name)
  return _internal_name();
}
inline void Layer::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:task.Layer.name)
}
inline std::string* Layer::mutable_name() {
  // @@protoc_insertion_point(field_mutable:task.Layer.name)
  return _internal_mutable_name();
}
inline const std::string& Layer::_internal_name() const {
  return name_.GetNoArena();
}
inline void Layer::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Layer::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.Layer.name)
}
inline void Layer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.Layer.name)
}
inline void Layer::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.Layer.name)
}
inline std::string* Layer::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Layer::release_name() {
  // @@protoc_insertion_point(field_release:task.Layer.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Layer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:task.Layer.name)
}

// optional string activation = 2;
inline bool Layer::_internal_has_activation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Layer::has_activation() const {
  return _internal_has_activation();
}
inline void Layer::clear_activation() {
  activation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Layer::activation() const {
  // @@protoc_insertion_point(field_get:task.Layer.activation)
  return _internal_activation();
}
inline void Layer::set_activation(const std::string& value) {
  _internal_set_activation(value);
  // @@protoc_insertion_point(field_set:task.Layer.activation)
}
inline std::string* Layer::mutable_activation() {
  // @@protoc_insertion_point(field_mutable:task.Layer.activation)
  return _internal_mutable_activation();
}
inline const std::string& Layer::_internal_activation() const {
  return activation_.GetNoArena();
}
inline void Layer::_internal_set_activation(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Layer::set_activation(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  activation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.Layer.activation)
}
inline void Layer::set_activation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.Layer.activation)
}
inline void Layer::set_activation(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.Layer.activation)
}
inline std::string* Layer::_internal_mutable_activation() {
  _has_bits_[0] |= 0x00000002u;
  return activation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Layer::release_activation() {
  // @@protoc_insertion_point(field_release:task.Layer.activation)
  if (!_internal_has_activation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return activation_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Layer::set_allocated_activation(std::string* activation) {
  if (activation != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  activation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), activation);
  // @@protoc_insertion_point(field_set_allocated:task.Layer.activation)
}

// optional uint32 output_size = 3;
inline bool Layer::_internal_has_output_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Layer::has_output_size() const {
  return _internal_has_output_size();
}
inline void Layer::clear_output_size() {
  output_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Layer::_internal_output_size() const {
  return output_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Layer::output_size() const {
  // @@protoc_insertion_point(field_get:task.Layer.output_size)
  return _internal_output_size();
}
inline void Layer::_internal_set_output_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  output_size_ = value;
}
inline void Layer::set_output_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_output_size(value);
  // @@protoc_insertion_point(field_set:task.Layer.output_size)
}

// repeated .task.Parameter parameter_list = 100;
inline int Layer::_internal_parameter_list_size() const {
  return parameter_list_.size();
}
inline int Layer::parameter_list_size() const {
  return _internal_parameter_list_size();
}
inline void Layer::clear_parameter_list() {
  parameter_list_.Clear();
}
inline ::task::Parameter* Layer::mutable_parameter_list(int index) {
  // @@protoc_insertion_point(field_mutable:task.Layer.parameter_list)
  return parameter_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Parameter >*
Layer::mutable_parameter_list() {
  // @@protoc_insertion_point(field_mutable_list:task.Layer.parameter_list)
  return &parameter_list_;
}
inline const ::task::Parameter& Layer::_internal_parameter_list(int index) const {
  return parameter_list_.Get(index);
}
inline const ::task::Parameter& Layer::parameter_list(int index) const {
  // @@protoc_insertion_point(field_get:task.Layer.parameter_list)
  return _internal_parameter_list(index);
}
inline ::task::Parameter* Layer::_internal_add_parameter_list() {
  return parameter_list_.Add();
}
inline ::task::Parameter* Layer::add_parameter_list() {
  // @@protoc_insertion_point(field_add:task.Layer.parameter_list)
  return _internal_add_parameter_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Parameter >&
Layer::parameter_list() const {
  // @@protoc_insertion_point(field_list:task.Layer.parameter_list)
  return parameter_list_;
}

// -------------------------------------------------------------------

// Parameter

// optional string key = 1;
inline bool Parameter::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Parameter::has_key() const {
  return _internal_has_key();
}
inline void Parameter::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Parameter::key() const {
  // @@protoc_insertion_point(field_get:task.Parameter.key)
  return _internal_key();
}
inline void Parameter::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:task.Parameter.key)
}
inline std::string* Parameter::mutable_key() {
  // @@protoc_insertion_point(field_mutable:task.Parameter.key)
  return _internal_mutable_key();
}
inline const std::string& Parameter::_internal_key() const {
  return key_.GetNoArena();
}
inline void Parameter::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Parameter::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.Parameter.key)
}
inline void Parameter::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.Parameter.key)
}
inline void Parameter::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.Parameter.key)
}
inline std::string* Parameter::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Parameter::release_key() {
  // @@protoc_insertion_point(field_release:task.Parameter.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Parameter::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:task.Parameter.key)
}

// optional .task.Parameter.Data_type data_type = 4;
inline bool Parameter::_internal_has_data_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Parameter::has_data_type() const {
  return _internal_has_data_type();
}
inline void Parameter::clear_data_type() {
  data_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::task::Parameter_Data_type Parameter::_internal_data_type() const {
  return static_cast< ::task::Parameter_Data_type >(data_type_);
}
inline ::task::Parameter_Data_type Parameter::data_type() const {
  // @@protoc_insertion_point(field_get:task.Parameter.data_type)
  return _internal_data_type();
}
inline void Parameter::_internal_set_data_type(::task::Parameter_Data_type value) {
  assert(::task::Parameter_Data_type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  data_type_ = value;
}
inline void Parameter::set_data_type(::task::Parameter_Data_type value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:task.Parameter.data_type)
}

// optional uint32 dim = 2;
inline bool Parameter::_internal_has_dim() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Parameter::has_dim() const {
  return _internal_has_dim();
}
inline void Parameter::clear_dim() {
  dim_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Parameter::_internal_dim() const {
  return dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Parameter::dim() const {
  // @@protoc_insertion_point(field_get:task.Parameter.dim)
  return _internal_dim();
}
inline void Parameter::_internal_set_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  dim_ = value;
}
inline void Parameter::set_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dim(value);
  // @@protoc_insertion_point(field_set:task.Parameter.dim)
}

// repeated uint32 shape = 3;
inline int Parameter::_internal_shape_size() const {
  return shape_.size();
}
inline int Parameter::shape_size() const {
  return _internal_shape_size();
}
inline void Parameter::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Parameter::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Parameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:task.Parameter.shape)
  return _internal_shape(index);
}
inline void Parameter::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:task.Parameter.shape)
}
inline void Parameter::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shape_.Add(value);
}
inline void Parameter::add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:task.Parameter.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Parameter::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Parameter::shape() const {
  // @@protoc_insertion_point(field_list:task.Parameter.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Parameter::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Parameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:task.Parameter.shape)
  return _internal_mutable_shape();
}

// -------------------------------------------------------------------

// HyperParameter

// optional string optimizer = 1;
inline bool HyperParameter::_internal_has_optimizer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HyperParameter::has_optimizer() const {
  return _internal_has_optimizer();
}
inline void HyperParameter::clear_optimizer() {
  optimizer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HyperParameter::optimizer() const {
  // @@protoc_insertion_point(field_get:task.HyperParameter.optimizer)
  return _internal_optimizer();
}
inline void HyperParameter::set_optimizer(const std::string& value) {
  _internal_set_optimizer(value);
  // @@protoc_insertion_point(field_set:task.HyperParameter.optimizer)
}
inline std::string* HyperParameter::mutable_optimizer() {
  // @@protoc_insertion_point(field_mutable:task.HyperParameter.optimizer)
  return _internal_mutable_optimizer();
}
inline const std::string& HyperParameter::_internal_optimizer() const {
  return optimizer_.GetNoArena();
}
inline void HyperParameter::_internal_set_optimizer(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  optimizer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HyperParameter::set_optimizer(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  optimizer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.HyperParameter.optimizer)
}
inline void HyperParameter::set_optimizer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  optimizer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.HyperParameter.optimizer)
}
inline void HyperParameter::set_optimizer(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  optimizer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.HyperParameter.optimizer)
}
inline std::string* HyperParameter::_internal_mutable_optimizer() {
  _has_bits_[0] |= 0x00000001u;
  return optimizer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HyperParameter::release_optimizer() {
  // @@protoc_insertion_point(field_release:task.HyperParameter.optimizer)
  if (!_internal_has_optimizer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return optimizer_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HyperParameter::set_allocated_optimizer(std::string* optimizer) {
  if (optimizer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  optimizer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optimizer);
  // @@protoc_insertion_point(field_set_allocated:task.HyperParameter.optimizer)
}

// optional float learning_rate = 2;
inline bool HyperParameter::_internal_has_learning_rate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HyperParameter::has_learning_rate() const {
  return _internal_has_learning_rate();
}
inline void HyperParameter::clear_learning_rate() {
  learning_rate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float HyperParameter::_internal_learning_rate() const {
  return learning_rate_;
}
inline float HyperParameter::learning_rate() const {
  // @@protoc_insertion_point(field_get:task.HyperParameter.learning_rate)
  return _internal_learning_rate();
}
inline void HyperParameter::_internal_set_learning_rate(float value) {
  _has_bits_[0] |= 0x00000008u;
  learning_rate_ = value;
}
inline void HyperParameter::set_learning_rate(float value) {
  _internal_set_learning_rate(value);
  // @@protoc_insertion_point(field_set:task.HyperParameter.learning_rate)
}

// optional uint32 mini_batch_size = 3;
inline bool HyperParameter::_internal_has_mini_batch_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HyperParameter::has_mini_batch_size() const {
  return _internal_has_mini_batch_size();
}
inline void HyperParameter::clear_mini_batch_size() {
  mini_batch_size_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HyperParameter::_internal_mini_batch_size() const {
  return mini_batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HyperParameter::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:task.HyperParameter.mini_batch_size)
  return _internal_mini_batch_size();
}
inline void HyperParameter::_internal_set_mini_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  mini_batch_size_ = value;
}
inline void HyperParameter::set_mini_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mini_batch_size(value);
  // @@protoc_insertion_point(field_set:task.HyperParameter.mini_batch_size)
}

// optional uint32 epoch = 4;
inline bool HyperParameter::_internal_has_epoch() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HyperParameter::has_epoch() const {
  return _internal_has_epoch();
}
inline void HyperParameter::clear_epoch() {
  epoch_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HyperParameter::_internal_epoch() const {
  return epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HyperParameter::epoch() const {
  // @@protoc_insertion_point(field_get:task.HyperParameter.epoch)
  return _internal_epoch();
}
inline void HyperParameter::_internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  epoch_ = value;
}
inline void HyperParameter::set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:task.HyperParameter.epoch)
}

// optional string loss = 5;
inline bool HyperParameter::_internal_has_loss() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HyperParameter::has_loss() const {
  return _internal_has_loss();
}
inline void HyperParameter::clear_loss() {
  loss_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HyperParameter::loss() const {
  // @@protoc_insertion_point(field_get:task.HyperParameter.loss)
  return _internal_loss();
}
inline void HyperParameter::set_loss(const std::string& value) {
  _internal_set_loss(value);
  // @@protoc_insertion_point(field_set:task.HyperParameter.loss)
}
inline std::string* HyperParameter::mutable_loss() {
  // @@protoc_insertion_point(field_mutable:task.HyperParameter.loss)
  return _internal_mutable_loss();
}
inline const std::string& HyperParameter::_internal_loss() const {
  return loss_.GetNoArena();
}
inline void HyperParameter::_internal_set_loss(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  loss_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HyperParameter::set_loss(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  loss_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.HyperParameter.loss)
}
inline void HyperParameter::set_loss(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  loss_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.HyperParameter.loss)
}
inline void HyperParameter::set_loss(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  loss_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.HyperParameter.loss)
}
inline std::string* HyperParameter::_internal_mutable_loss() {
  _has_bits_[0] |= 0x00000002u;
  return loss_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HyperParameter::release_loss() {
  // @@protoc_insertion_point(field_release:task.HyperParameter.loss)
  if (!_internal_has_loss()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return loss_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HyperParameter::set_allocated_loss(std::string* loss) {
  if (loss != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  loss_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loss);
  // @@protoc_insertion_point(field_set_allocated:task.HyperParameter.loss)
}

// optional string consistency = 6;
inline bool HyperParameter::_internal_has_consistency() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HyperParameter::has_consistency() const {
  return _internal_has_consistency();
}
inline void HyperParameter::clear_consistency() {
  consistency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& HyperParameter::consistency() const {
  // @@protoc_insertion_point(field_get:task.HyperParameter.consistency)
  return _internal_consistency();
}
inline void HyperParameter::set_consistency(const std::string& value) {
  _internal_set_consistency(value);
  // @@protoc_insertion_point(field_set:task.HyperParameter.consistency)
}
inline std::string* HyperParameter::mutable_consistency() {
  // @@protoc_insertion_point(field_mutable:task.HyperParameter.consistency)
  return _internal_mutable_consistency();
}
inline const std::string& HyperParameter::_internal_consistency() const {
  return consistency_.GetNoArena();
}
inline void HyperParameter::_internal_set_consistency(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  consistency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HyperParameter::set_consistency(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  consistency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.HyperParameter.consistency)
}
inline void HyperParameter::set_consistency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  consistency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.HyperParameter.consistency)
}
inline void HyperParameter::set_consistency(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  consistency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.HyperParameter.consistency)
}
inline std::string* HyperParameter::_internal_mutable_consistency() {
  _has_bits_[0] |= 0x00000004u;
  return consistency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HyperParameter::release_consistency() {
  // @@protoc_insertion_point(field_release:task.HyperParameter.consistency)
  if (!_internal_has_consistency()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return consistency_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HyperParameter::set_allocated_consistency(std::string* consistency) {
  if (consistency != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  consistency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consistency);
  // @@protoc_insertion_point(field_set_allocated:task.HyperParameter.consistency)
}

// -------------------------------------------------------------------

// ServerInfo

// optional string ip = 1;
inline bool ServerInfo::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServerInfo::has_ip() const {
  return _internal_has_ip();
}
inline void ServerInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerInfo::ip() const {
  // @@protoc_insertion_point(field_get:task.ServerInfo.ip)
  return _internal_ip();
}
inline void ServerInfo::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:task.ServerInfo.ip)
}
inline std::string* ServerInfo::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:task.ServerInfo.ip)
  return _internal_mutable_ip();
}
inline const std::string& ServerInfo::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void ServerInfo::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServerInfo::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.ServerInfo.ip)
}
inline void ServerInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.ServerInfo.ip)
}
inline void ServerInfo::set_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.ServerInfo.ip)
}
inline std::string* ServerInfo::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000001u;
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerInfo::release_ip() {
  // @@protoc_insertion_point(field_release:task.ServerInfo.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:task.ServerInfo.ip)
}

// optional uint32 port = 2;
inline bool ServerInfo::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServerInfo::has_port() const {
  return _internal_has_port();
}
inline void ServerInfo::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerInfo::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerInfo::port() const {
  // @@protoc_insertion_point(field_get:task.ServerInfo.port)
  return _internal_port();
}
inline void ServerInfo::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  port_ = value;
}
inline void ServerInfo::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:task.ServerInfo.port)
}

// -------------------------------------------------------------------

// ServerTask

// optional uint32 epoch = 6;
inline bool ServerTask::_internal_has_epoch() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServerTask::has_epoch() const {
  return _internal_has_epoch();
}
inline void ServerTask::clear_epoch() {
  epoch_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerTask::_internal_epoch() const {
  return epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerTask::epoch() const {
  // @@protoc_insertion_point(field_get:task.ServerTask.epoch)
  return _internal_epoch();
}
inline void ServerTask::_internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  epoch_ = value;
}
inline void ServerTask::set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:task.ServerTask.epoch)
}

// optional string optimizer = 1;
inline bool ServerTask::_internal_has_optimizer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServerTask::has_optimizer() const {
  return _internal_has_optimizer();
}
inline void ServerTask::clear_optimizer() {
  optimizer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerTask::optimizer() const {
  // @@protoc_insertion_point(field_get:task.ServerTask.optimizer)
  return _internal_optimizer();
}
inline void ServerTask::set_optimizer(const std::string& value) {
  _internal_set_optimizer(value);
  // @@protoc_insertion_point(field_set:task.ServerTask.optimizer)
}
inline std::string* ServerTask::mutable_optimizer() {
  // @@protoc_insertion_point(field_mutable:task.ServerTask.optimizer)
  return _internal_mutable_optimizer();
}
inline const std::string& ServerTask::_internal_optimizer() const {
  return optimizer_.GetNoArena();
}
inline void ServerTask::_internal_set_optimizer(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  optimizer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServerTask::set_optimizer(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  optimizer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.ServerTask.optimizer)
}
inline void ServerTask::set_optimizer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  optimizer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.ServerTask.optimizer)
}
inline void ServerTask::set_optimizer(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  optimizer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.ServerTask.optimizer)
}
inline std::string* ServerTask::_internal_mutable_optimizer() {
  _has_bits_[0] |= 0x00000001u;
  return optimizer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerTask::release_optimizer() {
  // @@protoc_insertion_point(field_release:task.ServerTask.optimizer)
  if (!_internal_has_optimizer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return optimizer_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerTask::set_allocated_optimizer(std::string* optimizer) {
  if (optimizer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  optimizer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optimizer);
  // @@protoc_insertion_point(field_set_allocated:task.ServerTask.optimizer)
}

// optional float learning_rate = 2;
inline bool ServerTask::_internal_has_learning_rate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServerTask::has_learning_rate() const {
  return _internal_has_learning_rate();
}
inline void ServerTask::clear_learning_rate() {
  learning_rate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ServerTask::_internal_learning_rate() const {
  return learning_rate_;
}
inline float ServerTask::learning_rate() const {
  // @@protoc_insertion_point(field_get:task.ServerTask.learning_rate)
  return _internal_learning_rate();
}
inline void ServerTask::_internal_set_learning_rate(float value) {
  _has_bits_[0] |= 0x00000002u;
  learning_rate_ = value;
}
inline void ServerTask::set_learning_rate(float value) {
  _internal_set_learning_rate(value);
  // @@protoc_insertion_point(field_set:task.ServerTask.learning_rate)
}

// repeated .task.Parameter parameter_list = 100;
inline int ServerTask::_internal_parameter_list_size() const {
  return parameter_list_.size();
}
inline int ServerTask::parameter_list_size() const {
  return _internal_parameter_list_size();
}
inline void ServerTask::clear_parameter_list() {
  parameter_list_.Clear();
}
inline ::task::Parameter* ServerTask::mutable_parameter_list(int index) {
  // @@protoc_insertion_point(field_mutable:task.ServerTask.parameter_list)
  return parameter_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Parameter >*
ServerTask::mutable_parameter_list() {
  // @@protoc_insertion_point(field_mutable_list:task.ServerTask.parameter_list)
  return &parameter_list_;
}
inline const ::task::Parameter& ServerTask::_internal_parameter_list(int index) const {
  return parameter_list_.Get(index);
}
inline const ::task::Parameter& ServerTask::parameter_list(int index) const {
  // @@protoc_insertion_point(field_get:task.ServerTask.parameter_list)
  return _internal_parameter_list(index);
}
inline ::task::Parameter* ServerTask::_internal_add_parameter_list() {
  return parameter_list_.Add();
}
inline ::task::Parameter* ServerTask::add_parameter_list() {
  // @@protoc_insertion_point(field_add:task.ServerTask.parameter_list)
  return _internal_add_parameter_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Parameter >&
ServerTask::parameter_list() const {
  // @@protoc_insertion_point(field_list:task.ServerTask.parameter_list)
  return parameter_list_;
}

// -------------------------------------------------------------------

// WorkerTask

// optional string data_path = 1;
inline bool WorkerTask::_internal_has_data_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WorkerTask::has_data_path() const {
  return _internal_has_data_path();
}
inline void WorkerTask::clear_data_path() {
  data_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WorkerTask::data_path() const {
  // @@protoc_insertion_point(field_get:task.WorkerTask.data_path)
  return _internal_data_path();
}
inline void WorkerTask::set_data_path(const std::string& value) {
  _internal_set_data_path(value);
  // @@protoc_insertion_point(field_set:task.WorkerTask.data_path)
}
inline std::string* WorkerTask::mutable_data_path() {
  // @@protoc_insertion_point(field_mutable:task.WorkerTask.data_path)
  return _internal_mutable_data_path();
}
inline const std::string& WorkerTask::_internal_data_path() const {
  return data_path_.GetNoArena();
}
inline void WorkerTask::_internal_set_data_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorkerTask::set_data_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.WorkerTask.data_path)
}
inline void WorkerTask::set_data_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.WorkerTask.data_path)
}
inline void WorkerTask::set_data_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.WorkerTask.data_path)
}
inline std::string* WorkerTask::_internal_mutable_data_path() {
  _has_bits_[0] |= 0x00000001u;
  return data_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkerTask::release_data_path() {
  // @@protoc_insertion_point(field_release:task.WorkerTask.data_path)
  if (!_internal_has_data_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkerTask::set_allocated_data_path(std::string* data_path) {
  if (data_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_path);
  // @@protoc_insertion_point(field_set_allocated:task.WorkerTask.data_path)
}

// optional string data_division = 2;
inline bool WorkerTask::_internal_has_data_division() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WorkerTask::has_data_division() const {
  return _internal_has_data_division();
}
inline void WorkerTask::clear_data_division() {
  data_division_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WorkerTask::data_division() const {
  // @@protoc_insertion_point(field_get:task.WorkerTask.data_division)
  return _internal_data_division();
}
inline void WorkerTask::set_data_division(const std::string& value) {
  _internal_set_data_division(value);
  // @@protoc_insertion_point(field_set:task.WorkerTask.data_division)
}
inline std::string* WorkerTask::mutable_data_division() {
  // @@protoc_insertion_point(field_mutable:task.WorkerTask.data_division)
  return _internal_mutable_data_division();
}
inline const std::string& WorkerTask::_internal_data_division() const {
  return data_division_.GetNoArena();
}
inline void WorkerTask::_internal_set_data_division(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_division_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorkerTask::set_data_division(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  data_division_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.WorkerTask.data_division)
}
inline void WorkerTask::set_data_division(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  data_division_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.WorkerTask.data_division)
}
inline void WorkerTask::set_data_division(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  data_division_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.WorkerTask.data_division)
}
inline std::string* WorkerTask::_internal_mutable_data_division() {
  _has_bits_[0] |= 0x00000002u;
  return data_division_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkerTask::release_data_division() {
  // @@protoc_insertion_point(field_release:task.WorkerTask.data_division)
  if (!_internal_has_data_division()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return data_division_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkerTask::set_allocated_data_division(std::string* data_division) {
  if (data_division != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_division_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_division);
  // @@protoc_insertion_point(field_set_allocated:task.WorkerTask.data_division)
}

// optional uint32 nums_layers = 3;
inline bool WorkerTask::_internal_has_nums_layers() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WorkerTask::has_nums_layers() const {
  return _internal_has_nums_layers();
}
inline void WorkerTask::clear_nums_layers() {
  nums_layers_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WorkerTask::_internal_nums_layers() const {
  return nums_layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WorkerTask::nums_layers() const {
  // @@protoc_insertion_point(field_get:task.WorkerTask.nums_layers)
  return _internal_nums_layers();
}
inline void WorkerTask::_internal_set_nums_layers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  nums_layers_ = value;
}
inline void WorkerTask::set_nums_layers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nums_layers(value);
  // @@protoc_insertion_point(field_set:task.WorkerTask.nums_layers)
}

// optional uint32 mini_batch_size = 4;
inline bool WorkerTask::_internal_has_mini_batch_size() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool WorkerTask::has_mini_batch_size() const {
  return _internal_has_mini_batch_size();
}
inline void WorkerTask::clear_mini_batch_size() {
  mini_batch_size_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WorkerTask::_internal_mini_batch_size() const {
  return mini_batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WorkerTask::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:task.WorkerTask.mini_batch_size)
  return _internal_mini_batch_size();
}
inline void WorkerTask::_internal_set_mini_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  mini_batch_size_ = value;
}
inline void WorkerTask::set_mini_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mini_batch_size(value);
  // @@protoc_insertion_point(field_set:task.WorkerTask.mini_batch_size)
}

// optional string loss = 5;
inline bool WorkerTask::_internal_has_loss() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WorkerTask::has_loss() const {
  return _internal_has_loss();
}
inline void WorkerTask::clear_loss() {
  loss_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WorkerTask::loss() const {
  // @@protoc_insertion_point(field_get:task.WorkerTask.loss)
  return _internal_loss();
}
inline void WorkerTask::set_loss(const std::string& value) {
  _internal_set_loss(value);
  // @@protoc_insertion_point(field_set:task.WorkerTask.loss)
}
inline std::string* WorkerTask::mutable_loss() {
  // @@protoc_insertion_point(field_mutable:task.WorkerTask.loss)
  return _internal_mutable_loss();
}
inline const std::string& WorkerTask::_internal_loss() const {
  return loss_.GetNoArena();
}
inline void WorkerTask::_internal_set_loss(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  loss_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorkerTask::set_loss(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  loss_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.WorkerTask.loss)
}
inline void WorkerTask::set_loss(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  loss_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.WorkerTask.loss)
}
inline void WorkerTask::set_loss(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  loss_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.WorkerTask.loss)
}
inline std::string* WorkerTask::_internal_mutable_loss() {
  _has_bits_[0] |= 0x00000004u;
  return loss_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkerTask::release_loss() {
  // @@protoc_insertion_point(field_release:task.WorkerTask.loss)
  if (!_internal_has_loss()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return loss_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkerTask::set_allocated_loss(std::string* loss) {
  if (loss != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  loss_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loss);
  // @@protoc_insertion_point(field_set_allocated:task.WorkerTask.loss)
}

// repeated .task.Layer layers = 100;
inline int WorkerTask::_internal_layers_size() const {
  return layers_.size();
}
inline int WorkerTask::layers_size() const {
  return _internal_layers_size();
}
inline void WorkerTask::clear_layers() {
  layers_.Clear();
}
inline ::task::Layer* WorkerTask::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:task.WorkerTask.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Layer >*
WorkerTask::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:task.WorkerTask.layers)
  return &layers_;
}
inline const ::task::Layer& WorkerTask::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::task::Layer& WorkerTask::layers(int index) const {
  // @@protoc_insertion_point(field_get:task.WorkerTask.layers)
  return _internal_layers(index);
}
inline ::task::Layer* WorkerTask::_internal_add_layers() {
  return layers_.Add();
}
inline ::task::Layer* WorkerTask::add_layers() {
  // @@protoc_insertion_point(field_add:task.WorkerTask.layers)
  return _internal_add_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::Layer >&
WorkerTask::layers() const {
  // @@protoc_insertion_point(field_list:task.WorkerTask.layers)
  return layers_;
}

// optional uint32 epoch = 6;
inline bool WorkerTask::_internal_has_epoch() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool WorkerTask::has_epoch() const {
  return _internal_has_epoch();
}
inline void WorkerTask::clear_epoch() {
  epoch_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WorkerTask::_internal_epoch() const {
  return epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WorkerTask::epoch() const {
  // @@protoc_insertion_point(field_get:task.WorkerTask.epoch)
  return _internal_epoch();
}
inline void WorkerTask::_internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  epoch_ = value;
}
inline void WorkerTask::set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:task.WorkerTask.epoch)
}

// optional string consistency = 7;
inline bool WorkerTask::_internal_has_consistency() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WorkerTask::has_consistency() const {
  return _internal_has_consistency();
}
inline void WorkerTask::clear_consistency() {
  consistency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& WorkerTask::consistency() const {
  // @@protoc_insertion_point(field_get:task.WorkerTask.consistency)
  return _internal_consistency();
}
inline void WorkerTask::set_consistency(const std::string& value) {
  _internal_set_consistency(value);
  // @@protoc_insertion_point(field_set:task.WorkerTask.consistency)
}
inline std::string* WorkerTask::mutable_consistency() {
  // @@protoc_insertion_point(field_mutable:task.WorkerTask.consistency)
  return _internal_mutable_consistency();
}
inline const std::string& WorkerTask::_internal_consistency() const {
  return consistency_.GetNoArena();
}
inline void WorkerTask::_internal_set_consistency(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  consistency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorkerTask::set_consistency(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  consistency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.WorkerTask.consistency)
}
inline void WorkerTask::set_consistency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  consistency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.WorkerTask.consistency)
}
inline void WorkerTask::set_consistency(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  consistency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.WorkerTask.consistency)
}
inline std::string* WorkerTask::_internal_mutable_consistency() {
  _has_bits_[0] |= 0x00000008u;
  return consistency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkerTask::release_consistency() {
  // @@protoc_insertion_point(field_release:task.WorkerTask.consistency)
  if (!_internal_has_consistency()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return consistency_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkerTask::set_allocated_consistency(std::string* consistency) {
  if (consistency != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  consistency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consistency);
  // @@protoc_insertion_point(field_set_allocated:task.WorkerTask.consistency)
}

// repeated .task.ServerInfo servers = 10;
inline int WorkerTask::_internal_servers_size() const {
  return servers_.size();
}
inline int WorkerTask::servers_size() const {
  return _internal_servers_size();
}
inline void WorkerTask::clear_servers() {
  servers_.Clear();
}
inline ::task::ServerInfo* WorkerTask::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:task.WorkerTask.servers)
  return servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::ServerInfo >*
WorkerTask::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:task.WorkerTask.servers)
  return &servers_;
}
inline const ::task::ServerInfo& WorkerTask::_internal_servers(int index) const {
  return servers_.Get(index);
}
inline const ::task::ServerInfo& WorkerTask::servers(int index) const {
  // @@protoc_insertion_point(field_get:task.WorkerTask.servers)
  return _internal_servers(index);
}
inline ::task::ServerInfo* WorkerTask::_internal_add_servers() {
  return servers_.Add();
}
inline ::task::ServerInfo* WorkerTask::add_servers() {
  // @@protoc_insertion_point(field_add:task.WorkerTask.servers)
  return _internal_add_servers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::task::ServerInfo >&
WorkerTask::servers() const {
  // @@protoc_insertion_point(field_list:task.WorkerTask.servers)
  return servers_;
}

// optional string dataset = 11;
inline bool WorkerTask::_internal_has_dataset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WorkerTask::has_dataset() const {
  return _internal_has_dataset();
}
inline void WorkerTask::clear_dataset() {
  dataset_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& WorkerTask::dataset() const {
  // @@protoc_insertion_point(field_get:task.WorkerTask.dataset)
  return _internal_dataset();
}
inline void WorkerTask::set_dataset(const std::string& value) {
  _internal_set_dataset(value);
  // @@protoc_insertion_point(field_set:task.WorkerTask.dataset)
}
inline std::string* WorkerTask::mutable_dataset() {
  // @@protoc_insertion_point(field_mutable:task.WorkerTask.dataset)
  return _internal_mutable_dataset();
}
inline const std::string& WorkerTask::_internal_dataset() const {
  return dataset_.GetNoArena();
}
inline void WorkerTask::_internal_set_dataset(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  dataset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorkerTask::set_dataset(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  dataset_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:task.WorkerTask.dataset)
}
inline void WorkerTask::set_dataset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  dataset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:task.WorkerTask.dataset)
}
inline void WorkerTask::set_dataset(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  dataset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:task.WorkerTask.dataset)
}
inline std::string* WorkerTask::_internal_mutable_dataset() {
  _has_bits_[0] |= 0x00000010u;
  return dataset_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorkerTask::release_dataset() {
  // @@protoc_insertion_point(field_release:task.WorkerTask.dataset)
  if (!_internal_has_dataset()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return dataset_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorkerTask::set_allocated_dataset(std::string* dataset) {
  if (dataset != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  dataset_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset);
  // @@protoc_insertion_point(field_set_allocated:task.WorkerTask.dataset)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace task

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::task::Parameter_Data_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::task::Parameter_Data_type>() {
  return ::task::Parameter_Data_type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5finfo_2eproto
