/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ParameterServer_H
#define ParameterServer_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "parameter_server_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ParameterServerIf {
 public:
  virtual ~ParameterServerIf() {}
  virtual void pull(std::string& _return, const int32_t epoch) = 0;
  virtual void push(const int32_t epoch, const std::string& gradient) = 0;
};

class ParameterServerIfFactory {
 public:
  typedef ParameterServerIf Handler;

  virtual ~ParameterServerIfFactory() {}

  virtual ParameterServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ParameterServerIf* /* handler */) = 0;
};

class ParameterServerIfSingletonFactory : virtual public ParameterServerIfFactory {
 public:
  ParameterServerIfSingletonFactory(const ::std::shared_ptr<ParameterServerIf>& iface) : iface_(iface) {}
  virtual ~ParameterServerIfSingletonFactory() {}

  virtual ParameterServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ParameterServerIf* /* handler */) {}

 protected:
  ::std::shared_ptr<ParameterServerIf> iface_;
};

class ParameterServerNull : virtual public ParameterServerIf {
 public:
  virtual ~ParameterServerNull() {}
  void pull(std::string& /* _return */, const int32_t /* epoch */) {
    return;
  }
  void push(const int32_t /* epoch */, const std::string& /* gradient */) {
    return;
  }
};

typedef struct _ParameterServer_pull_args__isset {
  _ParameterServer_pull_args__isset() : epoch(false) {}
  bool epoch :1;
} _ParameterServer_pull_args__isset;

class ParameterServer_pull_args {
 public:

  ParameterServer_pull_args(const ParameterServer_pull_args&);
  ParameterServer_pull_args& operator=(const ParameterServer_pull_args&);
  ParameterServer_pull_args() : epoch(0) {
  }

  virtual ~ParameterServer_pull_args() noexcept;
  int32_t epoch;

  _ParameterServer_pull_args__isset __isset;

  void __set_epoch(const int32_t val);

  bool operator == (const ParameterServer_pull_args & rhs) const
  {
    if (!(epoch == rhs.epoch))
      return false;
    return true;
  }
  bool operator != (const ParameterServer_pull_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParameterServer_pull_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParameterServer_pull_pargs {
 public:


  virtual ~ParameterServer_pull_pargs() noexcept;
  const int32_t* epoch;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParameterServer_pull_result__isset {
  _ParameterServer_pull_result__isset() : success(false) {}
  bool success :1;
} _ParameterServer_pull_result__isset;

class ParameterServer_pull_result {
 public:

  ParameterServer_pull_result(const ParameterServer_pull_result&);
  ParameterServer_pull_result& operator=(const ParameterServer_pull_result&);
  ParameterServer_pull_result() : success() {
  }

  virtual ~ParameterServer_pull_result() noexcept;
  std::string success;

  _ParameterServer_pull_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const ParameterServer_pull_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ParameterServer_pull_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParameterServer_pull_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParameterServer_pull_presult__isset {
  _ParameterServer_pull_presult__isset() : success(false) {}
  bool success :1;
} _ParameterServer_pull_presult__isset;

class ParameterServer_pull_presult {
 public:


  virtual ~ParameterServer_pull_presult() noexcept;
  std::string* success;

  _ParameterServer_pull_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ParameterServer_push_args__isset {
  _ParameterServer_push_args__isset() : epoch(false), gradient(false) {}
  bool epoch :1;
  bool gradient :1;
} _ParameterServer_push_args__isset;

class ParameterServer_push_args {
 public:

  ParameterServer_push_args(const ParameterServer_push_args&);
  ParameterServer_push_args& operator=(const ParameterServer_push_args&);
  ParameterServer_push_args() : epoch(0), gradient() {
  }

  virtual ~ParameterServer_push_args() noexcept;
  int32_t epoch;
  std::string gradient;

  _ParameterServer_push_args__isset __isset;

  void __set_epoch(const int32_t val);

  void __set_gradient(const std::string& val);

  bool operator == (const ParameterServer_push_args & rhs) const
  {
    if (!(epoch == rhs.epoch))
      return false;
    if (!(gradient == rhs.gradient))
      return false;
    return true;
  }
  bool operator != (const ParameterServer_push_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParameterServer_push_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParameterServer_push_pargs {
 public:


  virtual ~ParameterServer_push_pargs() noexcept;
  const int32_t* epoch;
  const std::string* gradient;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParameterServer_push_result {
 public:

  ParameterServer_push_result(const ParameterServer_push_result&);
  ParameterServer_push_result& operator=(const ParameterServer_push_result&);
  ParameterServer_push_result() {
  }

  virtual ~ParameterServer_push_result() noexcept;

  bool operator == (const ParameterServer_push_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ParameterServer_push_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParameterServer_push_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParameterServer_push_presult {
 public:


  virtual ~ParameterServer_push_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ParameterServerClient : virtual public ParameterServerIf {
 public:
  ParameterServerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ParameterServerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void pull(std::string& _return, const int32_t epoch);
  void send_pull(const int32_t epoch);
  void recv_pull(std::string& _return);
  void push(const int32_t epoch, const std::string& gradient);
  void send_push(const int32_t epoch, const std::string& gradient);
  void recv_push();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ParameterServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ParameterServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ParameterServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_pull(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_push(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ParameterServerProcessor(::std::shared_ptr<ParameterServerIf> iface) :
    iface_(iface) {
    processMap_["pull"] = &ParameterServerProcessor::process_pull;
    processMap_["push"] = &ParameterServerProcessor::process_push;
  }

  virtual ~ParameterServerProcessor() {}
};

class ParameterServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ParameterServerProcessorFactory(const ::std::shared_ptr< ParameterServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< ParameterServerIfFactory > handlerFactory_;
};

class ParameterServerMultiface : virtual public ParameterServerIf {
 public:
  ParameterServerMultiface(std::vector<std::shared_ptr<ParameterServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ParameterServerMultiface() {}
 protected:
  std::vector<std::shared_ptr<ParameterServerIf> > ifaces_;
  ParameterServerMultiface() {}
  void add(::std::shared_ptr<ParameterServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void pull(std::string& _return, const int32_t epoch) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pull(_return, epoch);
    }
    ifaces_[i]->pull(_return, epoch);
    return;
  }

  void push(const int32_t epoch, const std::string& gradient) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->push(epoch, gradient);
    }
    ifaces_[i]->push(epoch, gradient);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ParameterServerConcurrentClient : virtual public ParameterServerIf {
 public:
  ParameterServerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ParameterServerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void pull(std::string& _return, const int32_t epoch);
  int32_t send_pull(const int32_t epoch);
  void recv_pull(std::string& _return, const int32_t seqid);
  void push(const int32_t epoch, const std::string& gradient);
  int32_t send_push(const int32_t epoch, const std::string& gradient);
  void recv_push(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
