/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MLtask_H
#define MLtask_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "task_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MLtaskIf {
 public:
  virtual ~MLtaskIf() {}
  virtual bool submit(const std::string& dist_info, const std::string& network_struct) = 0;
  virtual void query(std::string& _return) = 0;
  virtual int32_t worker_regist_to_master() = 0;
  virtual void worker_ask_for_task(std::string& _return) = 0;
  virtual void worker_submit_kth_result(const std::string& kth_result) = 0;
  virtual void server_regist_to_master(const std::string& server_info) = 0;
  virtual void server_ask_for_task(std::string& _return) = 0;
};

class MLtaskIfFactory {
 public:
  typedef MLtaskIf Handler;

  virtual ~MLtaskIfFactory() {}

  virtual MLtaskIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MLtaskIf* /* handler */) = 0;
};

class MLtaskIfSingletonFactory : virtual public MLtaskIfFactory {
 public:
  MLtaskIfSingletonFactory(const ::std::shared_ptr<MLtaskIf>& iface) : iface_(iface) {}
  virtual ~MLtaskIfSingletonFactory() {}

  virtual MLtaskIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MLtaskIf* /* handler */) {}

 protected:
  ::std::shared_ptr<MLtaskIf> iface_;
};

class MLtaskNull : virtual public MLtaskIf {
 public:
  virtual ~MLtaskNull() {}
  bool submit(const std::string& /* dist_info */, const std::string& /* network_struct */) {
    bool _return = false;
    return _return;
  }
  void query(std::string& /* _return */) {
    return;
  }
  int32_t worker_regist_to_master() {
    int32_t _return = 0;
    return _return;
  }
  void worker_ask_for_task(std::string& /* _return */) {
    return;
  }
  void worker_submit_kth_result(const std::string& /* kth_result */) {
    return;
  }
  void server_regist_to_master(const std::string& /* server_info */) {
    return;
  }
  void server_ask_for_task(std::string& /* _return */) {
    return;
  }
};

typedef struct _MLtask_submit_args__isset {
  _MLtask_submit_args__isset() : dist_info(false), network_struct(false) {}
  bool dist_info :1;
  bool network_struct :1;
} _MLtask_submit_args__isset;

class MLtask_submit_args {
 public:

  MLtask_submit_args(const MLtask_submit_args&);
  MLtask_submit_args& operator=(const MLtask_submit_args&);
  MLtask_submit_args() : dist_info(), network_struct() {
  }

  virtual ~MLtask_submit_args() noexcept;
  std::string dist_info;
  std::string network_struct;

  _MLtask_submit_args__isset __isset;

  void __set_dist_info(const std::string& val);

  void __set_network_struct(const std::string& val);

  bool operator == (const MLtask_submit_args & rhs) const
  {
    if (!(dist_info == rhs.dist_info))
      return false;
    if (!(network_struct == rhs.network_struct))
      return false;
    return true;
  }
  bool operator != (const MLtask_submit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLtask_submit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLtask_submit_pargs {
 public:


  virtual ~MLtask_submit_pargs() noexcept;
  const std::string* dist_info;
  const std::string* network_struct;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MLtask_submit_result__isset {
  _MLtask_submit_result__isset() : success(false) {}
  bool success :1;
} _MLtask_submit_result__isset;

class MLtask_submit_result {
 public:

  MLtask_submit_result(const MLtask_submit_result&);
  MLtask_submit_result& operator=(const MLtask_submit_result&);
  MLtask_submit_result() : success(0) {
  }

  virtual ~MLtask_submit_result() noexcept;
  bool success;

  _MLtask_submit_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const MLtask_submit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MLtask_submit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLtask_submit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MLtask_submit_presult__isset {
  _MLtask_submit_presult__isset() : success(false) {}
  bool success :1;
} _MLtask_submit_presult__isset;

class MLtask_submit_presult {
 public:


  virtual ~MLtask_submit_presult() noexcept;
  bool* success;

  _MLtask_submit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MLtask_query_args {
 public:

  MLtask_query_args(const MLtask_query_args&);
  MLtask_query_args& operator=(const MLtask_query_args&);
  MLtask_query_args() {
  }

  virtual ~MLtask_query_args() noexcept;

  bool operator == (const MLtask_query_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MLtask_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLtask_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLtask_query_pargs {
 public:


  virtual ~MLtask_query_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MLtask_query_result__isset {
  _MLtask_query_result__isset() : success(false) {}
  bool success :1;
} _MLtask_query_result__isset;

class MLtask_query_result {
 public:

  MLtask_query_result(const MLtask_query_result&);
  MLtask_query_result& operator=(const MLtask_query_result&);
  MLtask_query_result() : success() {
  }

  virtual ~MLtask_query_result() noexcept;
  std::string success;

  _MLtask_query_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MLtask_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MLtask_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLtask_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MLtask_query_presult__isset {
  _MLtask_query_presult__isset() : success(false) {}
  bool success :1;
} _MLtask_query_presult__isset;

class MLtask_query_presult {
 public:


  virtual ~MLtask_query_presult() noexcept;
  std::string* success;

  _MLtask_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MLtask_worker_regist_to_master_args {
 public:

  MLtask_worker_regist_to_master_args(const MLtask_worker_regist_to_master_args&);
  MLtask_worker_regist_to_master_args& operator=(const MLtask_worker_regist_to_master_args&);
  MLtask_worker_regist_to_master_args() {
  }

  virtual ~MLtask_worker_regist_to_master_args() noexcept;

  bool operator == (const MLtask_worker_regist_to_master_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MLtask_worker_regist_to_master_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLtask_worker_regist_to_master_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLtask_worker_regist_to_master_pargs {
 public:


  virtual ~MLtask_worker_regist_to_master_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MLtask_worker_regist_to_master_result__isset {
  _MLtask_worker_regist_to_master_result__isset() : success(false) {}
  bool success :1;
} _MLtask_worker_regist_to_master_result__isset;

class MLtask_worker_regist_to_master_result {
 public:

  MLtask_worker_regist_to_master_result(const MLtask_worker_regist_to_master_result&);
  MLtask_worker_regist_to_master_result& operator=(const MLtask_worker_regist_to_master_result&);
  MLtask_worker_regist_to_master_result() : success(0) {
  }

  virtual ~MLtask_worker_regist_to_master_result() noexcept;
  int32_t success;

  _MLtask_worker_regist_to_master_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const MLtask_worker_regist_to_master_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MLtask_worker_regist_to_master_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLtask_worker_regist_to_master_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MLtask_worker_regist_to_master_presult__isset {
  _MLtask_worker_regist_to_master_presult__isset() : success(false) {}
  bool success :1;
} _MLtask_worker_regist_to_master_presult__isset;

class MLtask_worker_regist_to_master_presult {
 public:


  virtual ~MLtask_worker_regist_to_master_presult() noexcept;
  int32_t* success;

  _MLtask_worker_regist_to_master_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MLtask_worker_ask_for_task_args {
 public:

  MLtask_worker_ask_for_task_args(const MLtask_worker_ask_for_task_args&);
  MLtask_worker_ask_for_task_args& operator=(const MLtask_worker_ask_for_task_args&);
  MLtask_worker_ask_for_task_args() {
  }

  virtual ~MLtask_worker_ask_for_task_args() noexcept;

  bool operator == (const MLtask_worker_ask_for_task_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MLtask_worker_ask_for_task_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLtask_worker_ask_for_task_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLtask_worker_ask_for_task_pargs {
 public:


  virtual ~MLtask_worker_ask_for_task_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MLtask_worker_ask_for_task_result__isset {
  _MLtask_worker_ask_for_task_result__isset() : success(false) {}
  bool success :1;
} _MLtask_worker_ask_for_task_result__isset;

class MLtask_worker_ask_for_task_result {
 public:

  MLtask_worker_ask_for_task_result(const MLtask_worker_ask_for_task_result&);
  MLtask_worker_ask_for_task_result& operator=(const MLtask_worker_ask_for_task_result&);
  MLtask_worker_ask_for_task_result() : success() {
  }

  virtual ~MLtask_worker_ask_for_task_result() noexcept;
  std::string success;

  _MLtask_worker_ask_for_task_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MLtask_worker_ask_for_task_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MLtask_worker_ask_for_task_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLtask_worker_ask_for_task_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MLtask_worker_ask_for_task_presult__isset {
  _MLtask_worker_ask_for_task_presult__isset() : success(false) {}
  bool success :1;
} _MLtask_worker_ask_for_task_presult__isset;

class MLtask_worker_ask_for_task_presult {
 public:


  virtual ~MLtask_worker_ask_for_task_presult() noexcept;
  std::string* success;

  _MLtask_worker_ask_for_task_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MLtask_worker_submit_kth_result_args__isset {
  _MLtask_worker_submit_kth_result_args__isset() : kth_result(false) {}
  bool kth_result :1;
} _MLtask_worker_submit_kth_result_args__isset;

class MLtask_worker_submit_kth_result_args {
 public:

  MLtask_worker_submit_kth_result_args(const MLtask_worker_submit_kth_result_args&);
  MLtask_worker_submit_kth_result_args& operator=(const MLtask_worker_submit_kth_result_args&);
  MLtask_worker_submit_kth_result_args() : kth_result() {
  }

  virtual ~MLtask_worker_submit_kth_result_args() noexcept;
  std::string kth_result;

  _MLtask_worker_submit_kth_result_args__isset __isset;

  void __set_kth_result(const std::string& val);

  bool operator == (const MLtask_worker_submit_kth_result_args & rhs) const
  {
    if (!(kth_result == rhs.kth_result))
      return false;
    return true;
  }
  bool operator != (const MLtask_worker_submit_kth_result_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLtask_worker_submit_kth_result_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLtask_worker_submit_kth_result_pargs {
 public:


  virtual ~MLtask_worker_submit_kth_result_pargs() noexcept;
  const std::string* kth_result;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLtask_worker_submit_kth_result_result {
 public:

  MLtask_worker_submit_kth_result_result(const MLtask_worker_submit_kth_result_result&);
  MLtask_worker_submit_kth_result_result& operator=(const MLtask_worker_submit_kth_result_result&);
  MLtask_worker_submit_kth_result_result() {
  }

  virtual ~MLtask_worker_submit_kth_result_result() noexcept;

  bool operator == (const MLtask_worker_submit_kth_result_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MLtask_worker_submit_kth_result_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLtask_worker_submit_kth_result_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLtask_worker_submit_kth_result_presult {
 public:


  virtual ~MLtask_worker_submit_kth_result_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MLtask_server_regist_to_master_args__isset {
  _MLtask_server_regist_to_master_args__isset() : server_info(false) {}
  bool server_info :1;
} _MLtask_server_regist_to_master_args__isset;

class MLtask_server_regist_to_master_args {
 public:

  MLtask_server_regist_to_master_args(const MLtask_server_regist_to_master_args&);
  MLtask_server_regist_to_master_args& operator=(const MLtask_server_regist_to_master_args&);
  MLtask_server_regist_to_master_args() : server_info() {
  }

  virtual ~MLtask_server_regist_to_master_args() noexcept;
  std::string server_info;

  _MLtask_server_regist_to_master_args__isset __isset;

  void __set_server_info(const std::string& val);

  bool operator == (const MLtask_server_regist_to_master_args & rhs) const
  {
    if (!(server_info == rhs.server_info))
      return false;
    return true;
  }
  bool operator != (const MLtask_server_regist_to_master_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLtask_server_regist_to_master_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLtask_server_regist_to_master_pargs {
 public:


  virtual ~MLtask_server_regist_to_master_pargs() noexcept;
  const std::string* server_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLtask_server_regist_to_master_result {
 public:

  MLtask_server_regist_to_master_result(const MLtask_server_regist_to_master_result&);
  MLtask_server_regist_to_master_result& operator=(const MLtask_server_regist_to_master_result&);
  MLtask_server_regist_to_master_result() {
  }

  virtual ~MLtask_server_regist_to_master_result() noexcept;

  bool operator == (const MLtask_server_regist_to_master_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MLtask_server_regist_to_master_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLtask_server_regist_to_master_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLtask_server_regist_to_master_presult {
 public:


  virtual ~MLtask_server_regist_to_master_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MLtask_server_ask_for_task_args {
 public:

  MLtask_server_ask_for_task_args(const MLtask_server_ask_for_task_args&);
  MLtask_server_ask_for_task_args& operator=(const MLtask_server_ask_for_task_args&);
  MLtask_server_ask_for_task_args() {
  }

  virtual ~MLtask_server_ask_for_task_args() noexcept;

  bool operator == (const MLtask_server_ask_for_task_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MLtask_server_ask_for_task_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLtask_server_ask_for_task_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLtask_server_ask_for_task_pargs {
 public:


  virtual ~MLtask_server_ask_for_task_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MLtask_server_ask_for_task_result__isset {
  _MLtask_server_ask_for_task_result__isset() : success(false) {}
  bool success :1;
} _MLtask_server_ask_for_task_result__isset;

class MLtask_server_ask_for_task_result {
 public:

  MLtask_server_ask_for_task_result(const MLtask_server_ask_for_task_result&);
  MLtask_server_ask_for_task_result& operator=(const MLtask_server_ask_for_task_result&);
  MLtask_server_ask_for_task_result() : success() {
  }

  virtual ~MLtask_server_ask_for_task_result() noexcept;
  std::string success;

  _MLtask_server_ask_for_task_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MLtask_server_ask_for_task_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MLtask_server_ask_for_task_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLtask_server_ask_for_task_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MLtask_server_ask_for_task_presult__isset {
  _MLtask_server_ask_for_task_presult__isset() : success(false) {}
  bool success :1;
} _MLtask_server_ask_for_task_presult__isset;

class MLtask_server_ask_for_task_presult {
 public:


  virtual ~MLtask_server_ask_for_task_presult() noexcept;
  std::string* success;

  _MLtask_server_ask_for_task_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MLtaskClient : virtual public MLtaskIf {
 public:
  MLtaskClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MLtaskClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool submit(const std::string& dist_info, const std::string& network_struct);
  void send_submit(const std::string& dist_info, const std::string& network_struct);
  bool recv_submit();
  void query(std::string& _return);
  void send_query();
  void recv_query(std::string& _return);
  int32_t worker_regist_to_master();
  void send_worker_regist_to_master();
  int32_t recv_worker_regist_to_master();
  void worker_ask_for_task(std::string& _return);
  void send_worker_ask_for_task();
  void recv_worker_ask_for_task(std::string& _return);
  void worker_submit_kth_result(const std::string& kth_result);
  void send_worker_submit_kth_result(const std::string& kth_result);
  void recv_worker_submit_kth_result();
  void server_regist_to_master(const std::string& server_info);
  void send_server_regist_to_master(const std::string& server_info);
  void recv_server_regist_to_master();
  void server_ask_for_task(std::string& _return);
  void send_server_ask_for_task();
  void recv_server_ask_for_task(std::string& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MLtaskProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<MLtaskIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MLtaskProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_submit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_worker_regist_to_master(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_worker_ask_for_task(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_worker_submit_kth_result(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_server_regist_to_master(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_server_ask_for_task(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MLtaskProcessor(::std::shared_ptr<MLtaskIf> iface) :
    iface_(iface) {
    processMap_["submit"] = &MLtaskProcessor::process_submit;
    processMap_["query"] = &MLtaskProcessor::process_query;
    processMap_["worker_regist_to_master"] = &MLtaskProcessor::process_worker_regist_to_master;
    processMap_["worker_ask_for_task"] = &MLtaskProcessor::process_worker_ask_for_task;
    processMap_["worker_submit_kth_result"] = &MLtaskProcessor::process_worker_submit_kth_result;
    processMap_["server_regist_to_master"] = &MLtaskProcessor::process_server_regist_to_master;
    processMap_["server_ask_for_task"] = &MLtaskProcessor::process_server_ask_for_task;
  }

  virtual ~MLtaskProcessor() {}
};

class MLtaskProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MLtaskProcessorFactory(const ::std::shared_ptr< MLtaskIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< MLtaskIfFactory > handlerFactory_;
};

class MLtaskMultiface : virtual public MLtaskIf {
 public:
  MLtaskMultiface(std::vector<std::shared_ptr<MLtaskIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MLtaskMultiface() {}
 protected:
  std::vector<std::shared_ptr<MLtaskIf> > ifaces_;
  MLtaskMultiface() {}
  void add(::std::shared_ptr<MLtaskIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool submit(const std::string& dist_info, const std::string& network_struct) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->submit(dist_info, network_struct);
    }
    return ifaces_[i]->submit(dist_info, network_struct);
  }

  void query(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query(_return);
    }
    ifaces_[i]->query(_return);
    return;
  }

  int32_t worker_regist_to_master() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->worker_regist_to_master();
    }
    return ifaces_[i]->worker_regist_to_master();
  }

  void worker_ask_for_task(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->worker_ask_for_task(_return);
    }
    ifaces_[i]->worker_ask_for_task(_return);
    return;
  }

  void worker_submit_kth_result(const std::string& kth_result) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->worker_submit_kth_result(kth_result);
    }
    ifaces_[i]->worker_submit_kth_result(kth_result);
  }

  void server_regist_to_master(const std::string& server_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->server_regist_to_master(server_info);
    }
    ifaces_[i]->server_regist_to_master(server_info);
  }

  void server_ask_for_task(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->server_ask_for_task(_return);
    }
    ifaces_[i]->server_ask_for_task(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MLtaskConcurrentClient : virtual public MLtaskIf {
 public:
  MLtaskConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  MLtaskConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool submit(const std::string& dist_info, const std::string& network_struct);
  int32_t send_submit(const std::string& dist_info, const std::string& network_struct);
  bool recv_submit(const int32_t seqid);
  void query(std::string& _return);
  int32_t send_query();
  void recv_query(std::string& _return, const int32_t seqid);
  int32_t worker_regist_to_master();
  int32_t send_worker_regist_to_master();
  int32_t recv_worker_regist_to_master(const int32_t seqid);
  void worker_ask_for_task(std::string& _return);
  int32_t send_worker_ask_for_task();
  void recv_worker_ask_for_task(std::string& _return, const int32_t seqid);
  void worker_submit_kth_result(const std::string& kth_result);
  int32_t send_worker_submit_kth_result(const std::string& kth_result);
  void recv_worker_submit_kth_result(const int32_t seqid);
  void server_regist_to_master(const std::string& server_info);
  int32_t send_server_regist_to_master(const std::string& server_info);
  void recv_server_regist_to_master(const int32_t seqid);
  void server_ask_for_task(std::string& _return);
  int32_t send_server_ask_for_task();
  void recv_server_ask_for_task(std::string& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
