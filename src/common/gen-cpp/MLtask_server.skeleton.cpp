// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MLtask.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class MLtaskHandler : virtual public MLtaskIf {
 public:
  MLtaskHandler() {
    // Your initialization goes here
  }

  bool submit(const std::string& dist_info, const std::string& network_struct) {
    // Your implementation goes here
    printf("submit\n");
  }

  void query(std::string& _return) {
    // Your implementation goes here
    printf("query\n");
  }

  int32_t worker_regist_to_master() {
    // Your implementation goes here
    printf("worker_regist_to_master\n");
  }

  void worker_ask_for_task(std::string& _return) {
    // Your implementation goes here
    printf("worker_ask_for_task\n");
  }

  void worker_submit_kth_result(const std::string& kth_result) {
    // Your implementation goes here
    printf("worker_submit_kth_result\n");
  }

  void server_regist_to_master(const std::string& server_info) {
    // Your implementation goes here
    printf("server_regist_to_master\n");
  }

  void server_ask_for_task(std::string& _return) {
    // Your implementation goes here
    printf("server_ask_for_task\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<MLtaskHandler> handler(new MLtaskHandler());
  ::std::shared_ptr<TProcessor> processor(new MLtaskProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

